[{"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\index.js":"1","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\App.js":"2","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\Landingpage.js":"3","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Order.js":"4","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Seller.js":"5","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\Navigationbar.js":"6","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\Footer.js":"7","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Login\\Loginpage.js":"8","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\store.js":"9","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\ContactUs.js":"10","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Register\\Registerpage.js":"11","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Login\\Login.js":"12","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Register\\Register.js":"13","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Email.js":"14","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Register\\OTPmail.js":"15","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Register\\alert.js":"16","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Login\\alert.js":"17","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Login\\types.js":"18","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Register\\types.js":"19","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\reducers\\index.js":"20","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\reducers\\alert.js":"21","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\reducers\\auth.js":"22","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Buyer\\Buyer.js":"23","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Buyer\\Order\\Orderpage.js":"24","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Buyer\\Order\\AddUpdateOrderPopUp.js":"25","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Buyer\\Order\\OrderTable.js":"26","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\services\\index.js":"27","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\services\\orderDetail.service.js":"28","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\EmployeeList.js":"29","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\BuyerProfile.js":"30","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\Sellers.js":"31","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\Buyers.js":"32","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\AdminProfile.js":"33","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\Admins.js":"34","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\SellerProfile.js":"35","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\SellerDashboard.js":"36","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Login.js":"37","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\AddanAdmin.js":"38","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\LandingNav.js":"39","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\reducers\\sellers.js":"40","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\useForm.js":"41","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\BuyerNav.js":"42","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\actions\\sellers.js":"43","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\Popup.js":"44","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\SellerForm.js":"45","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\Employee.js":"46","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\AdminNav.js":"47","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\SellerNav.js":"48","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\actions\\api.js":"49","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\Chat\\Chat.js":"50","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\Chat\\ChatInput\\ChatInput.js":"51","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\Chat\\ChatWindow\\ChatWindow.js":"52","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\Chat\\ChatWindow\\Message\\Message.js":"53","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Admin.js":"54","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\models\\order.model.js":"55","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\models\\user.model.js":"56"},{"size":240,"mtime":1616318194829,"results":"57","hashOfConfig":"58"},{"size":3802,"mtime":1616324031609,"results":"59","hashOfConfig":"58"},{"size":1286,"mtime":1616318194813,"results":"60","hashOfConfig":"58"},{"size":11852,"mtime":1616318194818,"results":"61","hashOfConfig":"58"},{"size":13153,"mtime":1616318194820,"results":"62","hashOfConfig":"58"},{"size":1102,"mtime":1616318194814,"results":"63","hashOfConfig":"58"},{"size":2324,"mtime":1616318194813,"results":"64","hashOfConfig":"58"},{"size":6637,"mtime":1616318194804,"results":"65","hashOfConfig":"58"},{"size":399,"mtime":1614872087386,"results":"66","hashOfConfig":"58"},{"size":2474,"mtime":1616318194815,"results":"67","hashOfConfig":"58"},{"size":13926,"mtime":1616318194805,"results":"68","hashOfConfig":"58"},{"size":2558,"mtime":1614872087354,"results":"69","hashOfConfig":"58"},{"size":2485,"mtime":1614872087357,"results":"70","hashOfConfig":"58"},{"size":1017,"mtime":1614872087359,"results":"71","hashOfConfig":"58"},{"size":356,"mtime":1614872087356,"results":"72","hashOfConfig":"58"},{"size":353,"mtime":1614872087357,"results":"73","hashOfConfig":"58"},{"size":353,"mtime":1614872087355,"results":"74","hashOfConfig":"58"},{"size":393,"mtime":1614872087355,"results":"75","hashOfConfig":"58"},{"size":393,"mtime":1614872087357,"results":"76","hashOfConfig":"58"},{"size":212,"mtime":1616318194830,"results":"77","hashOfConfig":"58"},{"size":405,"mtime":1614872087384,"results":"78","hashOfConfig":"58"},{"size":1176,"mtime":1614872087385,"results":"79","hashOfConfig":"58"},{"size":5562,"mtime":1616314242221,"results":"80","hashOfConfig":"58"},{"size":2682,"mtime":1616413562736,"results":"81","hashOfConfig":"58"},{"size":6959,"mtime":1616414002120,"results":"82","hashOfConfig":"58"},{"size":2796,"mtime":1616314242261,"results":"83","hashOfConfig":"58"},{"size":95,"mtime":1616314242265,"results":"84","hashOfConfig":"58"},{"size":294,"mtime":1616314242265,"results":"85","hashOfConfig":"58"},{"size":7712,"mtime":1616318194801,"results":"86","hashOfConfig":"58"},{"size":6332,"mtime":1616318194800,"results":"87","hashOfConfig":"58"},{"size":6185,"mtime":1616318194802,"results":"88","hashOfConfig":"58"},{"size":6196,"mtime":1616318194800,"results":"89","hashOfConfig":"58"},{"size":6398,"mtime":1616318194799,"results":"90","hashOfConfig":"58"},{"size":6270,"mtime":1616318194799,"results":"91","hashOfConfig":"58"},{"size":6385,"mtime":1616318194802,"results":"92","hashOfConfig":"58"},{"size":8870,"mtime":1616318194821,"results":"93","hashOfConfig":"58"},{"size":16150,"mtime":1616318194816,"results":"94","hashOfConfig":"58"},{"size":13181,"mtime":1616318194815,"results":"95","hashOfConfig":"58"},{"size":1189,"mtime":1616318194813,"results":"96","hashOfConfig":"58"},{"size":798,"mtime":1616318194830,"results":"97","hashOfConfig":"58"},{"size":773,"mtime":1616318194828,"results":"98","hashOfConfig":"58"},{"size":1291,"mtime":1616318194806,"results":"99","hashOfConfig":"58"},{"size":1488,"mtime":1616318194798,"results":"100","hashOfConfig":"58"},{"size":1302,"mtime":1616318194801,"results":"101","hashOfConfig":"58"},{"size":6620,"mtime":1616318194801,"results":"102","hashOfConfig":"58"},{"size":6373,"mtime":1616318194800,"results":"103","hashOfConfig":"58"},{"size":1306,"mtime":1616318194805,"results":"104","hashOfConfig":"58"},{"size":1303,"mtime":1616318194814,"results":"105","hashOfConfig":"58"},{"size":433,"mtime":1616318194790,"results":"106","hashOfConfig":"58"},{"size":1640,"mtime":1616318194782,"results":"107","hashOfConfig":"58"},{"size":1168,"mtime":1616318194783,"results":"108","hashOfConfig":"58"},{"size":329,"mtime":1616318194783,"results":"109","hashOfConfig":"58"},{"size":271,"mtime":1616318194784,"results":"110","hashOfConfig":"58"},{"size":8902,"mtime":1616322124558,"results":"111","hashOfConfig":"58"},{"size":588,"mtime":1616408978572,"results":"112","hashOfConfig":"58"},{"size":479,"mtime":1616322292210,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},"1tvu9ys",{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"117"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"117"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"117"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"117"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"117"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"117"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"117"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"117"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"117"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"117"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"117"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"117"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"117"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"117"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"117"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"117"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"117"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"117"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"117"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"117"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"117"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"117"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"117"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"117"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"117"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"117"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"117"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\index.js",["258"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport Chat from \"./Chat/Chat\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n",["259","260"],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\App.js",["261","262","263","264","265"],"import React, { Fragment } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport NavigationBar from \"./components/layout/Navigationbar\";\r\nimport LandingNav from \"./components/layout/LandingNav\";\r\nimport LandingPage from \"./components/layout/Landingpage\";\r\nimport SellerPage from \"./components/pages/Seller\";\r\nimport BuyerPage from \"./components/pages/Buyer/Buyer\";\r\nimport AdminPage from \"./components/pages/Admin\";\r\nimport OrderPage from \"./components/pages/Order\";\r\nimport LoginPage from \"./components/pages/Login\";\r\n//import Loginpage from \"./components/auth/Login/Loginpage\";\r\nimport SellerDashboard from \"./components/pages/SellerDashboard\";\r\nimport RegisterPage from \"./components/auth/Register/Registerpage\";\r\nimport ContactUs from \"./components/pages/ContactUs\";\r\nimport Footer from \"./components/layout/Footer\";\r\nimport \"./App.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport Seller from \"./components/pages/Seller\";\r\nimport EmployeeList from \"./components/EmployeeList\";\r\nimport { ToastProvider } from \"react-toast-notifications\";\r\nimport Sellers from \"./components/Sellers\";\r\nimport Buyers from \"./components/pages/Buyer/Buyer\";\r\nimport Admins from \"./components/Admins\";\r\nimport AddanAdmin from \"./components/pages/AddanAdmin\";\r\nimport BuyerProfile from \"./components/BuyerProfile\";\r\nimport SellerProfile from \"./components/SellerProfile\";\r\nimport AdminProfile from \"./components/AdminProfile\";\r\nimport Buyer from \"./components/pages/Buyer/Buyer\";\r\nimport YourOrders from \"./components/pages/Buyer/Order/Orderpage\";\r\n\r\nconst App = () => (\r\n  <Provider store={store}>\r\n    <ToastProvider autoDismiss={true}>\r\n      <Router>\r\n        <Fragment>\r\n          {/* <LandingNav /> */}\r\n          <Route exact path=\"/\" component={LandingPage} />\r\n          <Switch>\r\n          <Route exact path=\"/\">\r\n            <NavigationBar/>\r\n            <LandingPage />\r\n            <Footer />\r\n          </Route>\r\n            <Route path=\"/register\">\r\n              <BuyerPage />\r\n            <Footer />\r\n            </Route>\r\n            <Route path=\"/login\">\r\n              <LoginPage />\r\n            <Footer />\r\n            </Route>\r\n            <Route path=\"/seller\">\r\n              <Seller />\r\n            <Footer />\r\n            </Route>\r\n            <Route path=\"/order\">\r\n            <NavigationBar/>\r\n              <OrderPage />\r\n            <Footer />\r\n            </Route>\r\n            <Route exact path=\"/admin\" component={AdminPage} />\r\n            {/* <Route path=\"/admin\">\r\n              <AdminPage />\r\n            </Route> */}\r\n            <Route path=\"/contact\">\r\n              <ContactUs />\r\n            </Route>\r\n            <Route path=\"/buyers\">\r\n              <Buyers />\r\n            </Route>\r\n            <Route path=\"/sellerdashboard\">\r\n              <SellerDashboard />\r\n            </Route>\r\n            <Route path=\"/sellerprofile\">\r\n              <SellerProfile />\r\n            </Route>\r\n            <Route path=\"/admins\">\r\n              <Admins />\r\n            </Route>\r\n            <Route path=\"/addanadmin\">\r\n              <AddanAdmin />\r\n            </Route>\r\n            <Route path=\"/adminprofile\">\r\n              <AdminProfile />\r\n            </Route>\r\n            <Route path=\"/yourorders\">\r\n              <YourOrders />\r\n            </Route>\r\n            <Route path=\"/sellers\">\r\n              {/* above component should be outside */}\r\n              <Sellers />\r\n            </Route>\r\n            <Route path=\"/buyerprofile\">\r\n              {/* above component should be outside */}\r\n              <BuyerProfile />\r\n            </Route>\r\n          </Switch>\r\n          {/* <Footer /> */}\r\n        </Fragment>\r\n      </Router>\r\n    </ToastProvider>\r\n  </Provider>\r\n);\r\n\r\nexport default App;\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\Landingpage.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Order.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Seller.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\Navigationbar.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\Footer.js",["266","267","268"],"import React from \"react\";\r\nimport \"./Style/Footer.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer-container\">\r\n      <section className=\"footer-subscription\">\r\n        <p className=\"footer-subscription-heading\">\r\n          JobForMe! For free! Earn Free!\r\n        </p>\r\n        <p className=\"footer-subscription-text\">\r\n          You can contact our admin panel at any time of your preference!\r\n        </p>\r\n      </section>\r\n      <section class=\"social-media\">\r\n        <div class=\"social-media-wrap\">\r\n          <div class=\"footer-logo\">\r\n            <Link to=\"/\" className=\"social-logo\">\r\n              JobForMe\r\n              <i class=\"fas fa-paper-plane\" />\r\n            </Link>\r\n          </div>\r\n          <small class=\"website-rights\">JobForMe © 2021</small>\r\n          <div class=\"social-icons\">\r\n            <a\r\n              href=\"https://www.facebook.com/\"\r\n              className=\"social-icon-link \"\r\n              target=\"_blank\"\r\n              aria-label=\"Facebook\"\r\n            >\r\n              <i class=\"fab fa-facebook-f\" />\r\n            </a>\r\n            <a\r\n              href=\" https://www.instagram.com/accounts/login/\"\r\n              class=\"social-icon-link instagram\"\r\n              to=\"/\"\r\n              target=\"_blank\"\r\n              aria-label=\"Instagram\"\r\n            >\r\n              <i class=\"fab fa-instagram\" />\r\n            </a>\r\n            <a\r\n              href=\"https://www.youtube.com/\"\r\n              className=\"social-icon-link youtube\"\r\n              target=\"_blank\"\r\n              aria-label=\"Youtube\"\r\n            >\r\n              <i class=\"fab fa-youtube\" />\r\n            </a>\r\n            <a\r\n              href=\"https://twitter.com/login?lang=en/\"\r\n              class=\"social-icon-link twitter\"\r\n              to=\"/\"\r\n              target=\"_blank\"\r\n              aria-label=\"Twitter\"\r\n            >\r\n              <i class=\"fab fa-twitter\" />\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Login\\Loginpage.js",[],["269","270"],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\store.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\ContactUs.js",["271","272","273","274","275"],"import React, { Fragment, useState } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport sendEmail from \"./Email\";\r\n\r\nconst ContactUs = () => {\r\n  const [formData, setFromData] = useState({\r\n    subject: \"\",\r\n    email: \"\",\r\n    body: \"\",\r\n    signature: \"\",\r\n  });\r\n\r\n  const { subject, email, body, signature } = formData;\r\n\r\n  const onChange = (e) =>\r\n    setFromData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    sendEmail(subject, email, body, signature);\r\n  };\r\n\r\n  return (\r\n    <section className=\"container\">\r\n      <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\r\n        {/* <form className=\"form\" onSubmit={MyComponent}> */}\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Subject\"\r\n            name=\"subject\"\r\n            value={subject}\r\n            onChange={(e) => onChange(e)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email Address\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={(e) => onChange(e)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-groud\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your Message Body\"\r\n            name=\"body\"\r\n            value={body}\r\n            onChange={(e) => onChange(e)}\r\n            minLength=\"3\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Signature\"\r\n            name=\"signature\"\r\n            value={signature}\r\n            onChange={(e) => onChange(e)}\r\n            required\r\n          />\r\n        </div>\r\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Send\" />\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ContactUs;\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Register\\Registerpage.js",["276"],"import React, { Fragment, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { setAlert } from \"./alert\";\r\nimport { Register } from \"./Register.js\";\r\nimport { sendOTPmail } from \"./OTPmail\";\r\n\r\nconst Registerpage = () => {\r\n  const [formData, setFromData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const { name, email, password, confirmPassword } = formData;\r\n\r\n  const onChange = (e) =>\r\n    setFromData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    sendOTPmail(email, name);\r\n\r\n    if (password !== confirmPassword)\r\n      setAlert(\"Passwords do not match\", \"danger\");\r\n    else sendOTPmail(email);\r\n    // else Register(name, email, password, confirmPassword);\r\n  };\r\n\r\n  return (\r\n    <section className=\"container\">\r\n      <Fragment>\r\n        <h1 className=\"large text-primary\">Sign Up</h1>\r\n        <p className=\"lead\">\r\n          <i className=\"fas fa-user\"></i> Create Your Account\r\n        </p>\r\n        <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Name\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={(e) => onChange(e)}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"email\"\r\n              placeholder=\"Email Address\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={(e) => onChange(e)}\r\n              required\r\n            />\r\n            <small className=\"form-text\">\r\n              This site uses Gravatar so if you want a profile image, use a\r\n              Gravatar email\r\n            </small>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={(e) => onChange(e)}\r\n              minLength=\"6\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"password\"\r\n              placeholder=\"Confirm Password\"\r\n              name=\"confirmPassword\"\r\n              value={confirmPassword}\r\n              onChange={(e) => onChange(e)}\r\n              minLength=\"6\"\r\n            />\r\n          </div>\r\n          <input type=\"submit\" className=\"btn btn-primary\" value=\"Register\" />\r\n        </form>\r\n        <p className=\"my-1\">\r\n          Already have an account? <Link to=\"/login\">Sign In</Link>\r\n        </p>\r\n      </Fragment>\r\n    </section>\r\n  );\r\n};\r\n\r\nRegisterpage.propTypes = {\r\n  setAlert: PropTypes.func.isRequired,\r\n  Register: PropTypes.func.isRequired,\r\n  isAuthenticated: PropTypes.bool,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n});\r\n\r\nexport default connect(null, { setAlert, Register })(Registerpage);\r\n\r\n// const [formData, setFormData] = useState({\r\n//   name: \"\",\r\n//   email: \"\",\r\n//   password: \"\",\r\n//   password2: \"\",\r\n// });\r\n\r\n// const { name, email, password, password2 } = formData;\r\n\r\n// const onChange = (e) =>\r\n//   setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n// const onSubmit = (e) => {\r\n//   e.preventDefault();\r\n//   Register(name, email, password);\r\n//   console.log(\"Page\");\r\n\r\n//   if (password !== password2) {\r\n//     console.log(\"Passwords do not match\");\r\n//   } else {\r\n//     // const newUser = {\r\n//     //   name,\r\n//     //   email,\r\n//     //   password\r\n//     // }\r\n//     // try {\r\n//     //   const config = {\r\n//     //     headers: {\r\n//     //       'Content-Type': 'application/json'\r\n//     //     }\r\n//     //   }\r\n//     //   const body = JSON.stringify(newUser);\r\n//     //   const res = await axios.post('api/users', body, config);\r\n//     //   console.log(res.data);\r\n//     // } catch(err) {\r\n//     //   console.error(err.response.data);\r\n//     // }\r\n\r\n//     try {\r\n//       user.FirstName = name;\r\n//       user.Email = email;\r\n//       user.Password = password;\r\n//       axois.post(\"https://localhost:5001/api/user\", user).then((response) => {\r\n//         console.log(response);\r\n//       });\r\n//     } catch (error) {\r\n//       console.log(error);\r\n//       console.log(\"errrrrrrrrrrrrrrrrrrr\");\r\n//     }\r\n//   }\r\n// };\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Login\\Login.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Register\\Register.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Email.js",["277"],"import React from \"react\";\r\nimport emailjs from \"emailjs-com\";\r\n\r\n// import \"./ContactUs.css\";\r\n\r\nconst Email = (subject, email, body, signature) => {\r\n  var templateParams = {\r\n    subject: subject,\r\n    email: email,\r\n    body: body,\r\n    signature: signature,\r\n  };\r\n\r\n  const serviceID = \"service_dod96eb\";\r\n  const templateID = \"template_h8af3yb\";\r\n  const userID = \"user_EY6nMH0QMSyeSbCdl9Dyi\";\r\n\r\n  try {\r\n    console.log(\"Got it\");\r\n    emailjs.send(serviceID, templateID, templateParams, userID);\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\n\r\nexport default Email;\r\n\r\n// function sendEmail(e) {\r\n//   e.preventDefault();\r\n\r\n//   emailjs\r\n//     .sendForm(\r\n//       \"service_dod96eb\",\r\n//       \"template_h8af3yb\",\r\n//       e.target,\r\n//       \"user_EY6nMH0QMSyeSbCdl9Dyi\"\r\n//     )\r\n//     .then(\r\n//       (result) => {\r\n//         console.log(result.text);\r\n//       },\r\n//       (error) => {\r\n//         console.log(error.text);\r\n//       }\r\n//     );\r\n//   e.target.reset();\r\n// }\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Register\\OTPmail.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Register\\alert.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Login\\alert.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Login\\types.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\auth\\Register\\types.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\reducers\\index.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\reducers\\alert.js",["278"],"import { SET_ALERT, REMOVE_ALERT } from \"../components/auth/Login/types\";\r\n\r\nconst initialState = [];\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_ALERT:\r\n      return [...state, payload];\r\n    case REMOVE_ALERT:\r\n      return state.filter((alert) => alert.id !== payload);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\reducers\\auth.js",["279"],"import {\r\n  REGISTER_FAIL,\r\n  REGISTER_SUCCESS,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_FAILED,\r\n  LOGIN_SUCCESS,\r\n  LOGOUT,\r\n} from \"../components/auth/Login/types\";\r\n\r\nconst initialState = {\r\n  // store the token\r\n  token: localStorage.getItem(\"token\"),\r\n  isAuthenticated: null,\r\n  loading: true,\r\n  user: null,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case USER_LOADED:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        loading: false,\r\n        user: payload,\r\n      };\r\n    case REGISTER_SUCCESS:\r\n    case LOGIN_SUCCESS:\r\n      localStorage.setItem(\"token\", payload.token);\r\n      return {\r\n        ...state,\r\n        ...payload,\r\n        isAuthenticated: true,\r\n        user: JSON.parse(atob(payload.token.split(\".\")[1])),\r\n        loading: false,\r\n      };\r\n    case REGISTER_FAIL:\r\n    case AUTH_ERROR:\r\n    case LOGIN_FAILED:\r\n    case LOGOUT:\r\n      localStorage.removeItem(\"token\");\r\n      return {\r\n        ...state,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Buyer\\Buyer.js",["280","281"],"import React, { Fragment } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport {Dashboard, Menu,ShoppingCart, SupervisorAccount,Chat, Equalizer, Report } from '@material-ui/icons';\r\nimport { Link, Route, Switch,useRouteMatch } from \"react-router-dom\";\r\nimport Orderpage from \"./Order/Orderpage\";\r\nconst drawerWidth = 240;\r\n\r\n \r\nconst useStyles = makeStyles((theme) => ({\r\n  \r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction ResponsiveDrawer(props) {\r\n  let { path, url } = useRouteMatch();\r\n  const { window } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const itemList =[\r\n    // {\r\n    //   name:'Dashboard',\r\n    //   icon: <Dashboard/>,\r\n    //   to: '/'\r\n    // },\r\n    {\r\n      name:'Order',\r\n      icon: <ShoppingCart/>,\r\n      to: `${url}/order`\r\n    },\r\n    {\r\n      name:'Message',\r\n      icon: <Chat/>,\r\n      to: `${url}/message`\r\n    },\r\n    {\r\n      name:'Admin',\r\n      icon: <SupervisorAccount/>,\r\n      to: `${url}/admin`\r\n    },\r\n    {\r\n      name:'Stats',\r\n      icon: <Equalizer/>,\r\n      to: `${url}/stats`\r\n    },\r\n    {\r\n      name:'Report',\r\n      icon: <Report/>,\r\n      to: `${url}/report`\r\n    }\r\n  ];\r\n\r\n  \r\n\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <List>\r\n        {itemList.map((item, index) => (\r\n          <Link to={item.to}>\r\n          <ListItem button key={item.name}>\r\n            <ListItemIcon>{item.icon}</ListItemIcon>\r\n            <ListItemText primary={item.name} />\r\n          </ListItem>\r\n          </Link>\r\n          \r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            You logged as Buyer\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      \r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        <Switch>\r\n        <Route exact path={`${path}/`}>\r\n            Dashboard\r\n        </Route>\r\n        <Route exact path={`${path}/order`}>\r\n            <Orderpage/>\r\n        </Route>\r\n        <Route exact path={`${path}/message`}>\r\n            Message\r\n        </Route>\r\n        <Route exact path={`${path}/admin`}>\r\n            Admin\r\n        </Route>\r\n        <Route exact path={`${path}/stats`}>\r\n            Statics\r\n        </Route>\r\n        <Route exact path={`${path}/report`}>\r\n            Report\r\n        </Route>\r\n      </Switch>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nResponsiveDrawer.propTypes = {\r\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\r\n  window: PropTypes.func,\r\n};\r\n\r\nexport default ResponsiveDrawer;\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Buyer\\Order\\Orderpage.js",["282","283","284","285","286","287","288"],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Buyer\\Order\\AddUpdateOrderPopUp.js",["289","290","291","292","293","294","295","296","297","298","299","300","301","302","303"],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Buyer\\Order\\OrderTable.js",["304"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Edit } from '@material-ui/icons';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n  });\r\n\r\n//   AddUpdateOrderPopUp.propTypes = {\r\n//     onClose: PropTypes.func.isRequired,\r\n//     open: PropTypes.bool.isRequired,\r\n//     selectedValue: PropTypes.string.isRequired,\r\n//   };\r\n// const handleClickOpen = () => { \r\n//   setOpen(true);\r\n// };\r\n// const handleClose = (value) => {\r\n//   setOpen(false);\r\n// };\r\n\r\nexport default function OrderTable(props) {\r\n    const [rows,setRows]= useState(props.tableData);\r\n    const classes = useStyles();\r\n    useEffect(() => {\r\n      setRows(rows=>props.tableData);\r\n      // console.log(props.tableData);\r\n    });\r\n    const deleteOrder=(id)=>{\r\n      props.deleteFunction(id);\r\n    }\r\n    const updateOrder=(obj)=>{\r\n      props.updateFunction(obj);\r\n    }\r\n    \r\n    return (\r\n        <TableContainer component={Paper}>\r\n          <Table className={classes.table} aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell align=\"left\">Order ID</TableCell>\r\n                <TableCell align=\"left\">Description</TableCell>\r\n                <TableCell align=\"left\">Price($)</TableCell>\r\n                <TableCell align=\"center\">Action</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map((row) => (\r\n                <TableRow key={row.name}>\r\n                  <TableCell align=\"left\">{row.orderDetailID}</TableCell>\r\n                  <TableCell align=\"left\">{row.description}</TableCell>\r\n                  <TableCell align=\"left\">{row.price}</TableCell>\r\n                  <TableCell align=\"center\">\r\n                  <IconButton style={{marginRight:\"10px\"}} aria-label=\"delete\">\r\n                    <DeleteIcon  onClick={()=>deleteOrder(row.orderDetailID)} />\r\n                    </IconButton>\r\n                    <IconButton aria-label=\"delete\">\r\n                    <Edit   onClick={()=>updateOrder(row)}/>\r\n                  </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      );\r\n}\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\services\\index.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\services\\orderDetail.service.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\EmployeeList.js",["305","306","307","308","309"],"import React, { useState, useEffect } from \"react\";\r\nimport Employee from \"./Employee\";\r\nimport axios from \"axios\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport Popup from \"./Popup\";\r\n\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n    padding: \"0px 8px\",\r\n  },\r\n  tableRow: {\r\n    height: 30,\r\n  },\r\n}));\r\n\r\nexport default function EmployeeList() {\r\n  const classes = useStyles();\r\n  const [employeeList, setEmployeeList] = useState([]);\r\n  const [recordForEdit, setRecordForEdit] = useState(null);\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    refreshEmployeeList();\r\n  }, []);\r\n\r\n  const employeeAPI = (url = \"https://localhost:5001/api/Employee/\") => {\r\n    return {\r\n      fetchAll: () => axios.get(url),\r\n      create: (newRecord) => axios.post(url, newRecord),\r\n      update: (id, updatedRecord) => axios.put(url + id, updatedRecord),\r\n      delete: (id) => axios.delete(url + id),\r\n    };\r\n  };\r\n\r\n  function refreshEmployeeList() {\r\n    employeeAPI()\r\n      .fetchAll()\r\n      .then((res) => {\r\n        setEmployeeList(res.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  const addOrEdit = (formData, onSuccess) => {\r\n    console.log(formData);\r\n    if (formData.get(\"employeeID\") == \"0\")\r\n      employeeAPI()\r\n        .create(formData)\r\n        .then((res) => {\r\n          onSuccess();\r\n          refreshEmployeeList();\r\n          setOpenPopup(false);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    else\r\n      employeeAPI()\r\n        .update(formData.get(\"employeeID\"), formData)\r\n        .then((res) => {\r\n          onSuccess();\r\n          refreshEmployeeList();\r\n          setOpenPopup(false);\r\n        })\r\n        .catch((err) => console.log(err));\r\n  };\r\n\r\n  const showRecordDetails = (data) => {\r\n    setRecordForEdit(data);\r\n    setOpenPopup(true);\r\n  };\r\n\r\n  const onDelete = (e, id) => {\r\n    e.stopPropagation();\r\n    if (window.confirm(\"Are you sure to delete this record?\"))\r\n      employeeAPI()\r\n        .delete(id)\r\n        .then((res) => refreshEmployeeList())\r\n        .catch((err) => console.log(err));\r\n  };\r\n\r\n  const imageCard = (data) => (\r\n    <div\r\n      className=\"card\"\r\n      onClick={() => {\r\n        showRecordDetails(data);\r\n      }}\r\n    >\r\n      <img src={data.imageSrc} className=\"card-img-top rounded-circle\" />\r\n      <div className=\"card-body\">\r\n        <h5>{data.employeeName}</h5>\r\n        <span>{data.occupation}</span> <br />\r\n        <button\r\n          className=\"btn btn-light delete-button\"\r\n          onClick={(e) => onDelete(e, parseInt(data.employeeID))}\r\n        >\r\n          <i className=\"far fa-trash-alt\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <section className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"jumbotron jumbotron-fluid py-4\">\r\n            {/* <div className=\"container text-center\">\r\n            <h1 className=\"display-4\">Employee Register</h1>\r\n          </div> */}\r\n            <div className={classes.root}>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                href=\"#outlined-buttons\"\r\n                onClick={() => setOpenPopup(true)}\r\n              >\r\n                Add New\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* <div classname=\"col-md-4\">\r\n        <Employee addOrEdit={addOrEdit} recordForEdit={recordForEdit} />\r\n      </div> */}\r\n        <div className=\"col-md-8\">\r\n          {/* <table>\r\n            <tbody>\r\n              {\r\n                // tr > 3 td\r\n                [...Array(Math.ceil(employeeList.length / 3))].map((e, i) => (\r\n                  <tr key={i}>\r\n                    <td>{imageCard(employeeList[3 * i])}</td>\r\n                    <td>\r\n                      {employeeList[3 * i + 1]\r\n                        ? imageCard(employeeList[3 * i + 1])\r\n                        : null}\r\n                    </td>\r\n                    <td>\r\n                      {employeeList[3 * i + 2]\r\n                        ? imageCard(employeeList[3 * i + 2])\r\n                        : null}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              }\r\n            </tbody>\r\n          </table> */}\r\n          <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n              <TableBody>\r\n                {\r\n                  // tr > 3 td\r\n                  [...Array(Math.ceil(employeeList.length / 3))].map((e, i) => (\r\n                    <TableRow key={i} className={classes.tableRow}>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        scope=\"row\"\r\n                        style={{ width: 100 }}\r\n                      >\r\n                        {imageCard(employeeList[3 * i])}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\" style={{ width: 100 }}>\r\n                        {employeeList[3 * i + 1]\r\n                          ? imageCard(employeeList[3 * i + 1])\r\n                          : null}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\" style={{ width: 100 }}>\r\n                        {employeeList[3 * i + 2]\r\n                          ? imageCard(employeeList[3 * i + 2])\r\n                          : null}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                }\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n        <Popup\r\n          title=\"Edit a buyer\"\r\n          openPopup={openPopup}\r\n          setOpenPopup={setOpenPopup}\r\n        >\r\n          <Employee addOrEdit={addOrEdit} recordForEdit={recordForEdit} />\r\n        </Popup>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\n{\r\n  /* <div className=\"col-md-12\">\r\n                <div className=\"jumbotron jumbotron-fluid py-4\">\r\n                    <div className=\"container text-center\">\r\n                        <h1 className=\"display-4\">Employee Register</h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n                <Employee\r\n                    addOrEdit={addOrEdit}\r\n                    recordForEdit={recordForEdit}\r\n                />\r\n            </div>\r\n            <div className=\"col-md-8\">\r\n                <table>\r\n                    <tbody>\r\n                        {\r\n                            tr > 3 td\r\n                            [...Array(Math.ceil(employeeList.length / 3))].map((e, i) =>\r\n                                <tr key={i}>\r\n                                    <td>{imageCard(employeeList[3 * i])}</td>\r\n                                    <td>{employeeList[3 * i + 1] ? imageCard(employeeList[3 * i + 1]) : null}</td>\r\n                                    <td>{employeeList[3 * i + 2] ? imageCard(employeeList[3 * i + 2]) : null}</td>\r\n                                </tr>\r\n                            )\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div> */\r\n}\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\BuyerProfile.js",["310","311"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as actions from \"../actions/sellers\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  withStyles,\r\n  ButtonGroup,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport SellerForm from \"./SellerForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nimport Popup from \"./Popup\";\r\nimport BuyerNav from \"./layout/BuyerNav\";\r\nimport Footer from \"./layout/Footer\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n  },\r\n});\r\n\r\nconst BuyerProfile = ({ classes, ...props }) => {\r\n  const { addToast } = useToasts();\r\n  const history = useHistory();\r\n  const profileId = history.location.state;\r\n\r\n  const [currentId, setCurrentId] = useState(0);\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.fetchAllSellers();\r\n  }, []);\r\n\r\n  const onDelete = (id) => {\r\n    if (window.confirm(\"Are you sure to delete this record?\"))\r\n      props.deleteSeller(id, () =>\r\n        addToast(\"Deleted successfully\", { appearance: \"info\" })\r\n      );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <BuyerNav />\r\n      <section className=\"container\">\r\n        <Paper className={classes.paper} elevation={3}>\r\n          <Grid>\r\n            {/* <Grid item xs={6}>\r\n            <SellerForm {...{ currentId, setCurrentId }} />\r\n          </Grid> */}\r\n            <Grid item xs={12}>\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead className={classes.root}>\r\n                    <TableRow>\r\n                      <TableCell>First Name</TableCell>\r\n                      <TableCell>Last Name</TableCell>\r\n                      {/* <TableCell>Address</TableCell>\r\n                    <TableCell>Category</TableCell> */}\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell></TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {props.sellerList.map((record, index) => {\r\n                      if (record.userId === profileId) {\r\n                        return (\r\n                          <TableRow key={index} hover>\r\n                            <TableCell>{record.firstName}</TableCell>\r\n                            <TableCell>{record.lastName}</TableCell>\r\n                            {/* <TableCell>{record.address}</TableCell>\r\n                          <TableCell>{record.category}</TableCell> */}\r\n                            <TableCell>{record.email}</TableCell>\r\n                            <TableCell>\r\n                              <ButtonGroup variant=\"text\">\r\n                                <Button>\r\n                                  <EditIcon\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                      setCurrentId(record.userId);\r\n                                      setOpenPopup(true);\r\n                                    }}\r\n                                  />\r\n                                </Button>\r\n                                <Button>\r\n                                  <DeleteIcon\r\n                                    color=\"secondary\"\r\n                                    onClick={() => {\r\n                                      onDelete(record.userId);\r\n                                    }}\r\n                                  />\r\n                                </Button>\r\n                              </ButtonGroup>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      }\r\n                      // return (\r\n                      //   <TableRow key={index} hover>\r\n                      //     <TableCell>{record.firstName}</TableCell>\r\n                      //     <TableCell>{record.lastName}</TableCell>\r\n                      //     <TableCell>{record.address}</TableCell>\r\n                      //     <TableCell>{record.category}</TableCell>\r\n                      //     <TableCell>{record.email}</TableCell>\r\n                      //     <TableCell>\r\n                      //       <ButtonGroup variant=\"text\">\r\n                      //         <Button>\r\n                      //           <EditIcon\r\n                      //             color=\"primary\"\r\n                      //             onClick={() => {\r\n                      //               setCurrentId(record.userId);\r\n                      //               setOpenPopup(true);\r\n                      //             }}\r\n                      //           />\r\n                      //         </Button>\r\n                      //         <Button>\r\n                      //           <DeleteIcon\r\n                      //             color=\"secondary\"\r\n                      //             onClick={() => {\r\n                      //               onDelete(record.userId);\r\n                      //             }}\r\n                      //           />\r\n                      //         </Button>\r\n                      //       </ButtonGroup>\r\n                      //     </TableCell>\r\n                      //   </TableRow>\r\n                      // );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Grid>\r\n            <Popup\r\n              title=\"Employee Form\"\r\n              openPopup={openPopup}\r\n              setOpenPopup={setOpenPopup}\r\n            >\r\n              <SellerForm {...{ currentId, setCurrentId, setOpenPopup }} />\r\n            </Popup>\r\n          </Grid>\r\n        </Paper>\r\n      </section>\r\n      <Footer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  sellerList: state.sellers.list,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  fetchAllSellers: actions.fetchAll,\r\n  deleteSeller: actions.Delete,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(styles)(BuyerProfile));\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\Sellers.js",["312","313"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/sellers\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  withStyles,\r\n  ButtonGroup,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport SellerForm from \"./SellerForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nimport Popup from \"./Popup\";\r\nimport AdminNav from \"./layout/AdminNav\";\r\nimport Footer from \"./layout/Footer\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n  },\r\n});\r\n\r\nconst Sellers = ({ classes, ...props }) => {\r\n  const { addToast } = useToasts();\r\n\r\n  const [currentId, setCurrentId] = useState(0);\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.fetchAllSellers();\r\n  }, []);\r\n\r\n  const onDelete = (id) => {\r\n    if (window.confirm(\"Are you sure to delete this record?\"))\r\n      props.deleteSeller(id, () =>\r\n        addToast(\"Deleted successfully\", { appearance: \"info\" })\r\n      );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <AdminNav />\r\n      <section className=\"container\">\r\n        <Paper className={classes.paper} elevation={3}>\r\n          <Grid>\r\n            {/* <Grid item xs={6}>\r\n            <SellerForm {...{ currentId, setCurrentId }} />\r\n          </Grid> */}\r\n            <Grid item xs={12}>\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead className={classes.root}>\r\n                    <TableRow>\r\n                      <TableCell>First Name</TableCell>\r\n                      <TableCell>Last Name</TableCell>\r\n                      <TableCell>Address</TableCell>\r\n                      <TableCell>Category</TableCell>\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell></TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {props.sellerList.map((record, index) => {\r\n                      if (record.userType === \"Seller\") {\r\n                        return (\r\n                          <TableRow key={index} hover>\r\n                            <TableCell>{record.firstName}</TableCell>\r\n                            <TableCell>{record.lastName}</TableCell>\r\n                            <TableCell>{record.address}</TableCell>\r\n                            <TableCell>{record.category}</TableCell>\r\n                            <TableCell>{record.email}</TableCell>\r\n                            <TableCell>\r\n                              <ButtonGroup variant=\"text\">\r\n                                <Button>\r\n                                  <EditIcon\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                      setCurrentId(record.userId);\r\n                                      setOpenPopup(true);\r\n                                    }}\r\n                                  />\r\n                                </Button>\r\n                                <Button>\r\n                                  <DeleteIcon\r\n                                    color=\"secondary\"\r\n                                    onClick={() => {\r\n                                      onDelete(record.userId);\r\n                                    }}\r\n                                  />\r\n                                </Button>\r\n                              </ButtonGroup>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      }\r\n                      // return (\r\n                      //   <TableRow key={index} hover>\r\n                      //     <TableCell>{record.firstName}</TableCell>\r\n                      //     <TableCell>{record.lastName}</TableCell>\r\n                      //     <TableCell>{record.address}</TableCell>\r\n                      //     <TableCell>{record.category}</TableCell>\r\n                      //     <TableCell>{record.email}</TableCell>\r\n                      //     <TableCell>\r\n                      //       <ButtonGroup variant=\"text\">\r\n                      //         <Button>\r\n                      //           <EditIcon\r\n                      //             color=\"primary\"\r\n                      //             onClick={() => {\r\n                      //               setCurrentId(record.userId);\r\n                      //               setOpenPopup(true);\r\n                      //             }}\r\n                      //           />\r\n                      //         </Button>\r\n                      //         <Button>\r\n                      //           <DeleteIcon\r\n                      //             color=\"secondary\"\r\n                      //             onClick={() => {\r\n                      //               onDelete(record.userId);\r\n                      //             }}\r\n                      //           />\r\n                      //         </Button>\r\n                      //       </ButtonGroup>\r\n                      //     </TableCell>\r\n                      //   </TableRow>\r\n                      // );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Grid>\r\n            <Popup\r\n              title=\"Employee Form\"\r\n              openPopup={openPopup}\r\n              setOpenPopup={setOpenPopup}\r\n            >\r\n              <SellerForm {...{ currentId, setCurrentId, setOpenPopup }} />\r\n            </Popup>\r\n          </Grid>\r\n        </Paper>\r\n      </section>\r\n      <Footer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  sellerList: state.sellers.list,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  fetchAllSellers: actions.fetchAll,\r\n  deleteSeller: actions.Delete,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(styles)(Sellers));\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\Buyers.js",["314","315"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/sellers\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  withStyles,\r\n  ButtonGroup,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport SellerForm from \"./SellerForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nimport Popup from \"./Popup\";\r\nimport AdminNav from \"./layout/AdminNav\";\r\nimport Footer from \"./layout/Footer\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n  },\r\n});\r\n\r\nconst Sellers = ({ classes, ...props }) => {\r\n  const { addToast } = useToasts();\r\n\r\n  const [currentId, setCurrentId] = useState(0);\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.fetchAllSellers();\r\n  }, []);\r\n\r\n  const onDelete = (id) => {\r\n    if (window.confirm(\"Are you sure to delete this record?\"))\r\n      props.deleteSeller(id, () =>\r\n        addToast(\"Deleted successfully\", { appearance: \"info\" })\r\n      );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <AdminNav />\r\n      <section className=\"container\">\r\n        <Paper className={classes.paper} elevation={3}>\r\n          <Grid>\r\n            {/* <Grid item xs={6}>\r\n            <SellerForm {...{ currentId, setCurrentId }} />\r\n          </Grid> */}\r\n            <Grid item xs={12}>\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead className={classes.root}>\r\n                    <TableRow>\r\n                      <TableCell>First Name</TableCell>\r\n                      <TableCell>Last Name</TableCell>\r\n                      {/* <TableCell>Address</TableCell>\r\n                    <TableCell>Category</TableCell> */}\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell></TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {props.sellerList.map((record, index) => {\r\n                      if (record.userType === \"Buyer\") {\r\n                        return (\r\n                          <TableRow key={index} hover>\r\n                            <TableCell>{record.firstName}</TableCell>\r\n                            <TableCell>{record.lastName}</TableCell>\r\n                            {/* <TableCell>{record.address}</TableCell>\r\n                          <TableCell>{record.category}</TableCell> */}\r\n                            <TableCell>{record.email}</TableCell>\r\n                            <TableCell>\r\n                              <ButtonGroup variant=\"text\">\r\n                                <Button>\r\n                                  <EditIcon\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                      setCurrentId(record.userId);\r\n                                      setOpenPopup(true);\r\n                                    }}\r\n                                  />\r\n                                </Button>\r\n                                <Button>\r\n                                  <DeleteIcon\r\n                                    color=\"secondary\"\r\n                                    onClick={() => {\r\n                                      onDelete(record.userId);\r\n                                    }}\r\n                                  />\r\n                                </Button>\r\n                              </ButtonGroup>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      }\r\n                      // return (\r\n                      //   <TableRow key={index} hover>\r\n                      //     <TableCell>{record.firstName}</TableCell>\r\n                      //     <TableCell>{record.lastName}</TableCell>\r\n                      //     <TableCell>{record.address}</TableCell>\r\n                      //     <TableCell>{record.category}</TableCell>\r\n                      //     <TableCell>{record.email}</TableCell>\r\n                      //     <TableCell>\r\n                      //       <ButtonGroup variant=\"text\">\r\n                      //         <Button>\r\n                      //           <EditIcon\r\n                      //             color=\"primary\"\r\n                      //             onClick={() => {\r\n                      //               setCurrentId(record.userId);\r\n                      //               setOpenPopup(true);\r\n                      //             }}\r\n                      //           />\r\n                      //         </Button>\r\n                      //         <Button>\r\n                      //           <DeleteIcon\r\n                      //             color=\"secondary\"\r\n                      //             onClick={() => {\r\n                      //               onDelete(record.userId);\r\n                      //             }}\r\n                      //           />\r\n                      //         </Button>\r\n                      //       </ButtonGroup>\r\n                      //     </TableCell>\r\n                      //   </TableRow>\r\n                      // );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Grid>\r\n            <Popup\r\n              title=\"Employee Form\"\r\n              openPopup={openPopup}\r\n              setOpenPopup={setOpenPopup}\r\n            >\r\n              <SellerForm {...{ currentId, setCurrentId, setOpenPopup }} />\r\n            </Popup>\r\n          </Grid>\r\n        </Paper>\r\n      </section>\r\n      <Footer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  sellerList: state.sellers.list,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  fetchAllSellers: actions.fetchAll,\r\n  deleteSeller: actions.Delete,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(styles)(Sellers));\r\n",["316","317"],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\AdminProfile.js",["318","319"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as actions from \"../actions/sellers\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  withStyles,\r\n  ButtonGroup,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport SellerForm from \"./SellerForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nimport Popup from \"./Popup\";\r\nimport AdminNav from \"./layout/AdminNav\";\r\nimport Footer from \"./layout/Footer\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n  },\r\n});\r\n\r\nconst SellerProfile = ({ classes, ...props }) => {\r\n  const { addToast } = useToasts();\r\n  const history = useHistory();\r\n  const profileEmail = history.location.state;\r\n  const [currentId, setCurrentId] = useState(0);\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.fetchAllSellers();\r\n  }, []);\r\n\r\n  const onDelete = (id) => {\r\n    if (window.confirm(\"Are you sure to delete this record?\"))\r\n      props.deleteSeller(id, () =>\r\n        addToast(\"Deleted successfully\", { appearance: \"info\" })\r\n      );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <AdminNav />\r\n      <section className=\"container\">\r\n        <Paper className={classes.paper} elevation={3}>\r\n          <Grid>\r\n            {/* <Grid item xs={6}>\r\n            <SellerForm {...{ currentId, setCurrentId }} />\r\n          </Grid> */}\r\n            <Grid item xs={12}>\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead className={classes.root}>\r\n                    <TableRow>\r\n                      <TableCell>First Name</TableCell>\r\n                      <TableCell>Last Name</TableCell>\r\n                      <TableCell>Address</TableCell>\r\n                      {/* <TableCell>Category</TableCell> */}\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell></TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {props.sellerList.map((record, index) => {\r\n                      // if (record.userType === \"Seller\") {\r\n                      if (record.email === profileEmail) {\r\n                        return (\r\n                          <TableRow key={index} hover>\r\n                            <TableCell>{record.firstName}</TableCell>\r\n                            <TableCell>{record.lastName}</TableCell>\r\n                            <TableCell>{record.address}</TableCell>\r\n                            {/* <TableCell>{record.category}</TableCell> */}\r\n                            <TableCell>{record.email}</TableCell>\r\n                            <TableCell>\r\n                              <ButtonGroup variant=\"text\">\r\n                                <Button>\r\n                                  <EditIcon\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                      setCurrentId(record.userId);\r\n                                      setOpenPopup(true);\r\n                                    }}\r\n                                  />\r\n                                </Button>\r\n                                <Button>\r\n                                  <DeleteIcon\r\n                                    color=\"secondary\"\r\n                                    onClick={() => {\r\n                                      onDelete(record.userId);\r\n                                    }}\r\n                                  />\r\n                                </Button>\r\n                              </ButtonGroup>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      }\r\n                      // return (\r\n                      //   <TableRow key={index} hover>\r\n                      //     <TableCell>{record.firstName}</TableCell>\r\n                      //     <TableCell>{record.lastName}</TableCell>\r\n                      //     <TableCell>{record.address}</TableCell>\r\n                      //     <TableCell>{record.category}</TableCell>\r\n                      //     <TableCell>{record.email}</TableCell>\r\n                      //     <TableCell>\r\n                      //       <ButtonGroup variant=\"text\">\r\n                      //         <Button>\r\n                      //           <EditIcon\r\n                      //             color=\"primary\"\r\n                      //             onClick={() => {\r\n                      //               setCurrentId(record.userId);\r\n                      //               setOpenPopup(true);\r\n                      //             }}\r\n                      //           />\r\n                      //         </Button>\r\n                      //         <Button>\r\n                      //           <DeleteIcon\r\n                      //             color=\"secondary\"\r\n                      //             onClick={() => {\r\n                      //               onDelete(record.userId);\r\n                      //             }}\r\n                      //           />\r\n                      //         </Button>\r\n                      //       </ButtonGroup>\r\n                      //     </TableCell>\r\n                      //   </TableRow>\r\n                      // );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Grid>\r\n            <Popup\r\n              title=\"Employee Form\"\r\n              openPopup={openPopup}\r\n              setOpenPopup={setOpenPopup}\r\n            >\r\n              <SellerForm {...{ currentId, setCurrentId, setOpenPopup }} />\r\n            </Popup>\r\n          </Grid>\r\n        </Paper>\r\n      </section>\r\n      <Footer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  sellerList: state.sellers.list,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  fetchAllSellers: actions.fetchAll,\r\n  deleteSeller: actions.Delete,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(styles)(SellerProfile));\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\Admins.js",["320","321"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/sellers\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  withStyles,\r\n  ButtonGroup,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport SellerForm from \"./SellerForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nimport Popup from \"./Popup\";\r\nimport AdminNav from \"./layout/AdminNav\";\r\nimport Footer from \"./layout/Footer\";\r\nimport AddanAdmin from \"./pages/AddanAdmin\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n  },\r\n});\r\n\r\nconst Sellers = ({ classes, ...props }) => {\r\n  const { addToast } = useToasts();\r\n\r\n  const [currentId, setCurrentId] = useState(0);\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.fetchAllSellers();\r\n  }, []);\r\n\r\n  const onDelete = (id) => {\r\n    if (window.confirm(\"Are you sure to delete this record?\"))\r\n      props.deleteSeller(id, () =>\r\n        addToast(\"Deleted successfully\", { appearance: \"info\" })\r\n      );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <AdminNav />\r\n      <section className=\"container\">\r\n        <Paper className={classes.paper} elevation={3}>\r\n          <Grid>\r\n            {/* <Grid item xs={6}>\r\n            <SellerForm {...{ currentId, setCurrentId }} />\r\n          </Grid> */}\r\n            <Grid item xs={12}>\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead className={classes.root}>\r\n                    <TableRow>\r\n                      <TableCell>First Name</TableCell>\r\n                      <TableCell>Last Name</TableCell>\r\n                      <TableCell>Address</TableCell>\r\n                      {/* <TableCell>Category</TableCell> */}\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell></TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {props.sellerList.map((record, index) => {\r\n                      if (record.userType === \"Admin\") {\r\n                        return (\r\n                          <TableRow key={index} hover>\r\n                            <TableCell>{record.firstName}</TableCell>\r\n                            <TableCell>{record.lastName}</TableCell>\r\n                            <TableCell>{record.address}</TableCell>\r\n                            {/* <TableCell>{record.category}</TableCell> */}\r\n                            <TableCell>{record.email}</TableCell>\r\n                            <TableCell>\r\n                              <ButtonGroup variant=\"text\">\r\n                                <Button>\r\n                                  <EditIcon\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                      setCurrentId(record.userId);\r\n                                      setOpenPopup(true);\r\n                                    }}\r\n                                  />\r\n                                </Button>\r\n                                <Button>\r\n                                  <DeleteIcon\r\n                                    color=\"secondary\"\r\n                                    onClick={() => {\r\n                                      onDelete(record.userId);\r\n                                    }}\r\n                                  />\r\n                                </Button>\r\n                              </ButtonGroup>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      }\r\n                      // return (\r\n                      //   <TableRow key={index} hover>\r\n                      //     <TableCell>{record.firstName}</TableCell>\r\n                      //     <TableCell>{record.lastName}</TableCell>\r\n                      //     <TableCell>{record.address}</TableCell>\r\n                      //     <TableCell>{record.category}</TableCell>\r\n                      //     <TableCell>{record.email}</TableCell>\r\n                      //     <TableCell>\r\n                      //       <ButtonGroup variant=\"text\">\r\n                      //         <Button>\r\n                      //           <EditIcon\r\n                      //             color=\"primary\"\r\n                      //             onClick={() => {\r\n                      //               setCurrentId(record.userId);\r\n                      //               setOpenPopup(true);\r\n                      //             }}\r\n                      //           />\r\n                      //         </Button>\r\n                      //         <Button>\r\n                      //           <DeleteIcon\r\n                      //             color=\"secondary\"\r\n                      //             onClick={() => {\r\n                      //               onDelete(record.userId);\r\n                      //             }}\r\n                      //           />\r\n                      //         </Button>\r\n                      //       </ButtonGroup>\r\n                      //     </TableCell>\r\n                      //   </TableRow>\r\n                      // );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Grid>\r\n            <Popup\r\n              title=\"Employee Form\"\r\n              openPopup={openPopup}\r\n              setOpenPopup={setOpenPopup}\r\n            >\r\n              <SellerForm {...{ currentId, setCurrentId, setOpenPopup }} />\r\n            </Popup>\r\n          </Grid>\r\n        </Paper>\r\n        <AddanAdmin />\r\n      </section>\r\n      <Footer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  sellerList: state.sellers.list,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  fetchAllSellers: actions.fetchAll,\r\n  deleteSeller: actions.Delete,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(styles)(Sellers));\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\SellerProfile.js",["322","323"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as actions from \"../actions/sellers\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  withStyles,\r\n  ButtonGroup,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport SellerForm from \"./SellerForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nimport Popup from \"./Popup\";\r\nimport SellerNav from \"./layout/SellerNav\";\r\nimport Footer from \"./layout/Footer\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n  },\r\n});\r\n\r\nconst SellerProfile = ({ classes, ...props }) => {\r\n  const { addToast } = useToasts();\r\n  const history = useHistory();\r\n  const profileEmail = history.location.state;\r\n  const [currentId, setCurrentId] = useState(0);\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.fetchAllSellers();\r\n  }, []);\r\n\r\n  const onDelete = (id) => {\r\n    if (window.confirm(\"Are you sure to delete this record?\"))\r\n      props.deleteSeller(id, () =>\r\n        addToast(\"Deleted successfully\", { appearance: \"info\" })\r\n      );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <SellerNav />\r\n      <section className=\"container\">\r\n        <Paper className={classes.paper} elevation={3}>\r\n          <Grid>\r\n            {/* <Grid item xs={6}>\r\n            <SellerForm {...{ currentId, setCurrentId }} />\r\n          </Grid> */}\r\n            <Grid item xs={12}>\r\n              <TableContainer>\r\n                <Table>\r\n                  <TableHead className={classes.root}>\r\n                    <TableRow>\r\n                      <TableCell>First Name</TableCell>\r\n                      <TableCell>Last Name</TableCell>\r\n                      <TableCell>Address</TableCell>\r\n                      <TableCell>Category</TableCell>\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell></TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {props.sellerList.map((record, index) => {\r\n                      // if (record.userType === \"Seller\") {\r\n                      if (record.email === profileEmail) {\r\n                        return (\r\n                          <TableRow key={index} hover>\r\n                            <TableCell>{record.firstName}</TableCell>\r\n                            <TableCell>{record.lastName}</TableCell>\r\n                            <TableCell>{record.address}</TableCell>\r\n                            <TableCell>{record.category}</TableCell>\r\n                            <TableCell>{record.email}</TableCell>\r\n                            <TableCell>\r\n                              <ButtonGroup variant=\"text\">\r\n                                <Button>\r\n                                  <EditIcon\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                      setCurrentId(record.userId);\r\n                                      setOpenPopup(true);\r\n                                    }}\r\n                                  />\r\n                                </Button>\r\n                                <Button>\r\n                                  <DeleteIcon\r\n                                    color=\"secondary\"\r\n                                    onClick={() => {\r\n                                      onDelete(record.userId);\r\n                                    }}\r\n                                  />\r\n                                </Button>\r\n                              </ButtonGroup>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      }\r\n                      // return (\r\n                      //   <TableRow key={index} hover>\r\n                      //     <TableCell>{record.firstName}</TableCell>\r\n                      //     <TableCell>{record.lastName}</TableCell>\r\n                      //     <TableCell>{record.address}</TableCell>\r\n                      //     <TableCell>{record.category}</TableCell>\r\n                      //     <TableCell>{record.email}</TableCell>\r\n                      //     <TableCell>\r\n                      //       <ButtonGroup variant=\"text\">\r\n                      //         <Button>\r\n                      //           <EditIcon\r\n                      //             color=\"primary\"\r\n                      //             onClick={() => {\r\n                      //               setCurrentId(record.userId);\r\n                      //               setOpenPopup(true);\r\n                      //             }}\r\n                      //           />\r\n                      //         </Button>\r\n                      //         <Button>\r\n                      //           <DeleteIcon\r\n                      //             color=\"secondary\"\r\n                      //             onClick={() => {\r\n                      //               onDelete(record.userId);\r\n                      //             }}\r\n                      //           />\r\n                      //         </Button>\r\n                      //       </ButtonGroup>\r\n                      //     </TableCell>\r\n                      //   </TableRow>\r\n                      // );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Grid>\r\n            <Popup\r\n              title=\"Employee Form\"\r\n              openPopup={openPopup}\r\n              setOpenPopup={setOpenPopup}\r\n            >\r\n              <SellerForm {...{ currentId, setCurrentId, setOpenPopup }} />\r\n            </Popup>\r\n          </Grid>\r\n        </Paper>\r\n      </section>\r\n      <Footer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  sellerList: state.sellers.list,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  fetchAllSellers: actions.fetchAll,\r\n  deleteSeller: actions.Delete,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(styles)(SellerProfile));\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\SellerDashboard.js",["324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../actions/sellers\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  withStyles,\r\n  ButtonGroup,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport EmployeeList from \"../EmployeeList\";\r\n\r\nimport SellerNav from \"../layout/SellerNav\";\r\nimport Footer from \"../layout/Footer\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n  },\r\n  card: {\r\n    maxWidth: 345,\r\n    margin: 0,\r\n    padding: 10,\r\n  },\r\n});\r\n\r\nconst Sellers = ({ classes, ...props }) => {\r\n  const { addToast } = useToasts();\r\n  const history = useHistory();\r\n  console.log(history.location.state);\r\n  const sellerEmail = history.location.state;\r\n  const [currentId, setCurrentId] = useState(0);\r\n\r\n  useEffect(() => {\r\n    props.fetchAllSellers();\r\n  }, []);\r\n\r\n  const onDelete = (id) => {\r\n    if (window.confirm(\"Are you sure to delete this record?\"))\r\n      props.deleteSeller(id, () =>\r\n        addToast(\"Deleted successfully\", { appearance: \"info\" })\r\n      );\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <SellerNav {...{ sellerEmail }} />\r\n      <section className=\"container\">\r\n        <Grid container spacing={1}>\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <Link to=\"/buyers\">\r\n            <Card className={classes.card}>\r\n              <CardActionArea>\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  alt=\"Contemplative Reptile\"\r\n                  height=\"140\"\r\n                  image=\"https://images.unsplash.com/photo-1594835494259-43c6e66ad369?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1052&q=80\"\r\n                  title=\"Contemplative Reptile\"\r\n                />\r\n                <CardContent>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Appointed Orders\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    color=\"textSecondary\"\r\n                    component=\"p\"\r\n                  >\r\n                    View appointed orders for you!\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    color=\"textSecondary\"\r\n                    component=\"p\"\r\n                  >\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      color=\"textSecondary\"\r\n                      component=\"p\"\r\n                    >\r\n                      Click on the edit button to make changes\r\n                    </Typography>\r\n                  </Typography>\r\n                </CardContent>\r\n              </CardActionArea>\r\n              <CardActions>\r\n                {/* <Button size=\"small\" color=\"primary\">\r\n              Buyers' List\r\n            </Button> */}\r\n                {/* <Link to=\"/seller\" className=\"btn btn-primary\">\r\n              Buyers' List\r\n            </Link> */}\r\n                {/* <Button size=\"small\" color=\"primary\">\r\n                Add a Buyer\r\n              </Button> */}\r\n              </CardActions>\r\n            </Card>\r\n          </Link>\r\n          <Link\r\n            to={{\r\n              pathname: \"/sellerprofile\",\r\n              state: sellerEmail,\r\n            }}\r\n          >\r\n            <Card className={classes.card}>\r\n              <CardActionArea>\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  alt=\"Contemplative Reptile\"\r\n                  height=\"140\"\r\n                  image=\"https://images.unsplash.com/photo-1534683251650-3fd64cd1561a?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1020&q=80\"\r\n                  title=\"Contemplative Reptile\"\r\n                />\r\n                <CardContent>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Your seller profile\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    color=\"textSecondary\"\r\n                    component=\"p\"\r\n                  >\r\n                    Add account changes.\r\n                  </Typography>\r\n                </CardContent>\r\n              </CardActionArea>\r\n              <CardActions>\r\n                {/* <Button size=\"small\" color=\"primary\">\r\n                Sellers' List\r\n              </Button>\r\n              <Button size=\"small\" color=\"primary\">\r\n                Add a Seller\r\n              </Button> */}\r\n              </CardActions>\r\n            </Card>\r\n          </Link>\r\n          <Card className={classes.card}>\r\n            <CardActionArea>\r\n              <CardMedia\r\n                component=\"img\"\r\n                alt=\"Contemplative Reptile\"\r\n                height=\"140\"\r\n                image=\"https://images.unsplash.com/photo-1509315703195-529879416a7d?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80\"\r\n                title=\"Contemplative Reptile\"\r\n              />\r\n              <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  Orders\r\n                </Typography>\r\n                {/* <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                Lizards are a widespread group of squamate reptiles, with over\r\n                6,000 species, ranging across all continents except Antarctica\r\n              </Typography> */}\r\n              </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n              {/* <Button size=\"small\" color=\"primary\">\r\n              Orders' List\r\n            </Button>\r\n            <Button size=\"small\" color=\"primary\">\r\n              Place a Order\r\n            </Button> */}\r\n            </CardActions>\r\n          </Card>\r\n        </Grid>\r\n        {/* <Paper className={classes.paper} elevation={3}>\r\n        <Grid>\r\n          <Grid item xs={6}>\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead className={classes.root}>\r\n                  <TableRow>\r\n                    <TableCell>First Name</TableCell>\r\n                    <TableCell>Last Name</TableCell>\r\n                    <TableCell></TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {props.sellerList.map((record, index) => {\r\n                    return (\r\n                      <TableRow key={index} hover>\r\n                        <TableCell>{record.firstName}</TableCell>\r\n                        <TableCell>{record.lastName}</TableCell>\r\n                        <TableCell>\r\n                          <ButtonGroup variant=\"text\">\r\n                            <Button>\r\n                              <EditIcon\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                  setCurrentId(record.userId);\r\n                                }}\r\n                              />\r\n                            </Button>\r\n                            <Button>\r\n                              <DeleteIcon\r\n                                color=\"secondary\"\r\n                                onClick={() => onDelete(record.userId)}\r\n                              />\r\n                            </Button>\r\n                          </ButtonGroup>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      <EmployeeList /> */}\r\n      </section>\r\n      <Footer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  sellerList: state.sellers.list,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  fetchAllSellers: actions.fetchAll,\r\n  deleteSeller: actions.Delete,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(styles)(Sellers));\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Login.js",["341","342","343","344","345","346","347","348","349","350","351"],"import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  withStyles,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport useForm from \"../useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../actions/sellers\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nimport LandngNav from \"../layout/LandingNav\";\r\nimport Footer from \"../layout/Footer\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    \"& .MuiTextField-root\": {\r\n      margin: theme.spacing(1),\r\n      minWidth: \"100%\",\r\n    },\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: \"100%\",\r\n  },\r\n  smMargin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n});\r\n\r\nconst initialFieldValues = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  address: \"\",\r\n  userType: \"Buyer\",\r\n  category: \"\",\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst SellersForm = ({ classes, ...props }) => {\r\n  const { addToast } = useToasts();\r\n  let history = useHistory();\r\n\r\n  const validate = (fieldValues = values) => {\r\n    let temp = { ...errors };\r\n    if (\"firstName\" in fieldValues)\r\n      temp.firstName = fieldValues.firstName ? \"\" : \"This field is required.\";\r\n    if (\"lastName\" in fieldValues)\r\n      temp.lastName = fieldValues.lastName ? \"\" : \"This field is required.\";\r\n    if (\"userTpye\" in fieldValues)\r\n      temp.userType = fieldValues.userType ? \"\" : \"This field is required.\";\r\n    if (\"password\" in fieldValues)\r\n      temp.password = fieldValues.password ? \"\" : \"This field is required.\";\r\n    if (\"category\" in fieldValues)\r\n      temp.category = fieldValues.category ? \"\" : \"This field is required.\";\r\n    if (\"email\" in fieldValues)\r\n      temp.email = /^$|.+@.+..+/.test(fieldValues.email)\r\n        ? \"\"\r\n        : \"Email is not valid.\";\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n\r\n    if (fieldValues === values)\r\n      return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const setRole = (fieldValues = values) => {\r\n    fieldValues.userType = \"Buyer\";\r\n  };\r\n\r\n  const {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm,\r\n  } = useForm(\r\n    initialFieldValues,\r\n    validate,\r\n    props.setCurrentId,\r\n    props.setOpenPopup\r\n  );\r\n\r\n  //material-ui select\r\n  // const inputLabel = React.useRef(null);\r\n  // const [labelWidth, setLabelWidth] = React.useState(0);\r\n  // React.useEffect(() => {\r\n  //   setLabelWidth(inputLabel.current.offsetWidth);\r\n  // }, []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // console.log(\"bofore\");\r\n    // history.push(\"/admin\");\r\n    //return <Redirect to=\"/admin\" />;\r\n\r\n    //   props.sellerList.map((record, index) => {\r\n    //     if (record.email === values.email) {\r\n    //       return console.log(\"SUCCESS\");\r\n    //     }\r\n    //   });\r\n\r\n    if (\r\n      props.sellerList.find(\r\n        (x) => x.email === values.email && x.userType === \"Buyer\"\r\n      )\r\n    ) {\r\n      console.log(\"SUCCESS\");\r\n      // history.push(\"/order\");\r\n      history.push({\r\n        pathname: \"/order\",\r\n        state: values.email,\r\n      });\r\n    } else if (\r\n      props.sellerList.find(\r\n        (x) => x.email === values.email && x.userType === \"Seller\"\r\n      )\r\n    ) {\r\n      console.log(\"You are a seller.\");\r\n      // history.push(\"/sellerdashboard\");\r\n      history.push({\r\n        pathname: \"/sellerdashboard\",\r\n        state: values.email,\r\n      });\r\n    } else if (\r\n      props.sellerList.find(\r\n        (x) => x.email === values.email && x.userType === \"Admin\"\r\n      )\r\n    ) {\r\n      console.log(\"You are a admin.\");\r\n      // history.push(\"/admin\");\r\n      history.push({\r\n        pathname: \"/admin\",\r\n        state: values.email,\r\n      });\r\n    }\r\n    // setRole();\r\n    // if (validate()) {\r\n    //   const onSuccess = () => {\r\n    //     resetForm();\r\n    //     addToast(\"Submitted successfully\", { appearance: \"success\" });\r\n    //   };\r\n    //   // if (props.currentId === 0) {\r\n    //   //   props.createSeller(values, onSuccess);\r\n    //   // } else {\r\n    //   //   props.updateSeller(props.currentId, values, onSuccess);\r\n    //   // }\r\n    //   props.createSeller(values, onSuccess);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.currentId !== 0) {\r\n      setValues({\r\n        ...props.sellerList.find((x) => x.userId === props.currentId),\r\n      });\r\n      setErrors({});\r\n    }\r\n  }, [props.currentId]);\r\n  return (\r\n    <Fragment>\r\n      {/* <div>\r\n        <div>\r\n          <video\r\n            style={{\r\n              alignItem: \"center\",\r\n              justifyContent: \"center\",\r\n              position: \"realative\",\r\n              zIndex: -1,\r\n              width: \"100%\",\r\n            }}\r\n            autoPlay=\"true\"\r\n            loop\r\n            muted\r\n            src=\"https://sg.fiverrcdn.com/packages_lp/cover_video.mp4\"\r\n          />\r\n        </div>\r\n      </div> */}\r\n      <LandngNav />\r\n      <section className=\"container\">\r\n        <div>\r\n          <h1 className=\"large text-primary\">Let's log in first!</h1>\r\n          <p className=\"lead\">\r\n            <i className=\"fas fa-user\"></i> Log into your Customer profile\r\n          </p>\r\n        </div>\r\n        <form\r\n          autoComplete=\"off\"\r\n          noValidate\r\n          className={classes.root}\r\n          onSubmit={handleSubmit}\r\n        >\r\n          <Grid container>\r\n            {/* <Grid item xs={12}>\r\n              <TextField\r\n                name=\"firstName\"\r\n                variant=\"outlined\"\r\n                label=\"First Name\"\r\n                value={values.firstName}\r\n                onChange={handleInputChange}\r\n                {...(errors.firstName && {\r\n                  error: true,\r\n                  helperText: errors.firstName,\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                name=\"lastName\"\r\n                variant=\"outlined\"\r\n                label=\"Last Name\"\r\n                value={values.lastName}\r\n                onChange={handleInputChange}\r\n                {...(errors.lastName && {\r\n                  error: true,\r\n                  helperText: errors.lastName,\r\n                })}\r\n              />\r\n            </Grid> */}\r\n            {/* <Grid item xs={12}>\r\n              <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControl}\r\n                {...(errors.category && { error: true })}\r\n              >\r\n                <InputLabel ref={inputLabel}>Category</InputLabel>\r\n                <Select\r\n                  name=\"category\"\r\n                  value={values.category}\r\n                  onChange={handleInputChange}\r\n                  labelWidth={labelWidth}\r\n                >\r\n                  <MenuItem value=\"\">Select a Category</MenuItem>\r\n                  <MenuItem value=\"illustration\">Illustration</MenuItem>\r\n                  <MenuItem value=\"albumCovers\">Album Covers</MenuItem>\r\n                  <MenuItem value=\"vectorArts\">Vector Arts</MenuItem>\r\n                  <MenuItem value=\"photoEditing\">Photo Editing</MenuItem>\r\n                  <MenuItem value=\"videoEditing\">Video Editing</MenuItem>\r\n                  <MenuItem value=\"uiDesigning\">UI Designing</MenuItem>\r\n                </Select>\r\n                {errors.category && (\r\n                  <FormHelperText>{errors.category}</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid> */}\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                name=\"email\"\r\n                variant=\"outlined\"\r\n                label=\"Email\"\r\n                value={values.email}\r\n                onChange={handleInputChange}\r\n                {...(errors.email && { error: true, helperText: errors.email })}\r\n              />\r\n            </Grid>\r\n            {/* <Grid item xs={12}>\r\n              <TextField\r\n                name=\"address\"\r\n                variant=\"outlined\"\r\n                label=\"Address\"\r\n                value={values.address}\r\n                onChange={handleInputChange}\r\n                {...(errors.address && {\r\n                  error: true,\r\n                  helperText: errors.address,\r\n                })}\r\n              />\r\n            </Grid> */}\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                name=\"password\"\r\n                variant=\"outlined\"\r\n                label=\"Password\"\r\n                value={values.password}\r\n                onChange={handleInputChange}\r\n                {...(errors.password && {\r\n                  error: true,\r\n                  helperText: errors.password,\r\n                })}\r\n              />\r\n              <div>{props.currentId}</div>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <div>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className={classes.smMargin}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </section>\r\n      <Footer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  sellerList: state.sellers.list,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  createSeller: actions.create,\r\n  updateSeller: actions.update,\r\n  fetchAllSellers: actions.fetchAll,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(styles)(SellersForm));\r\n\r\n// import React, { Fragment } from \"react\";\r\n// import PropTypes from 'prop-types';\r\n// import AppBar from '@material-ui/core/AppBar';\r\n// import CssBaseline from '@material-ui/core/CssBaseline';\r\n// import Divider from '@material-ui/core/Divider';\r\n// import Drawer from '@material-ui/core/Drawer';\r\n// import Hidden from '@material-ui/core/Hidden';\r\n// import IconButton from '@material-ui/core/IconButton';\r\n// import List from '@material-ui/core/List';\r\n// import ListItem from '@material-ui/core/ListItem';\r\n// import ListItemIcon from '@material-ui/core/ListItemIcon';\r\n// import ListItemText from '@material-ui/core/ListItemText';\r\n// import Toolbar from '@material-ui/core/Toolbar';\r\n// import Typography from '@material-ui/core/Typography';\r\n// import { makeStyles, useTheme } from '@material-ui/core/styles';\r\n// import {Dashboard, Menu,ShoppingCart, SupervisorAccount,Chat, Equalizer, Report } from '@material-ui/icons';\r\n// import { Link, Route, Switch,useRouteMatch } from \"react-router-dom\";\r\n// // import { Orderpage } from \"./Buyer/Order-page\";\r\n// const drawerWidth = 240;\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n\r\n//   root: {\r\n//     display: 'flex',\r\n//   },\r\n//   drawer: {\r\n//     [theme.breakpoints.up('sm')]: {\r\n//       width: drawerWidth,\r\n//       flexShrink: 0,\r\n//     },\r\n//   },\r\n//   appBar: {\r\n//     [theme.breakpoints.up('sm')]: {\r\n//       width: `calc(100% - ${drawerWidth}px)`,\r\n//       marginLeft: drawerWidth,\r\n//     },\r\n//   },\r\n//   menuButton: {\r\n//     marginRight: theme.spacing(2),\r\n//     [theme.breakpoints.up('sm')]: {\r\n//       display: 'none',\r\n//     },\r\n//   },\r\n//   // necessary for content to be below app bar\r\n//   toolbar: theme.mixins.toolbar,\r\n//   drawerPaper: {\r\n//     width: drawerWidth,\r\n//   },\r\n//   content: {\r\n//     flexGrow: 1,\r\n//     padding: theme.spacing(3),\r\n//   },\r\n// }));\r\n\r\n// function ResponsiveDrawer(props) {\r\n//   let { path, url } = useRouteMatch();\r\n//   const { window } = props;\r\n//   const classes = useStyles();\r\n//   const theme = useTheme();\r\n//   const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n//   const handleDrawerToggle = () => {\r\n//     setMobileOpen(!mobileOpen);\r\n//   };\r\n\r\n//   const itemList =[\r\n//     {\r\n//       name:'Dashboard',\r\n//       icon: <Dashboard/>,\r\n//       to: '/'\r\n//     },\r\n//     {\r\n//       name:'Order',\r\n//       icon: <ShoppingCart/>,\r\n//       to: `${url}/order`\r\n//     },\r\n//     {\r\n//       name:'Message',\r\n//       icon: <Chat/>,\r\n//       to: `${url}/message`\r\n//     },\r\n//     {\r\n//       name:'Admin',\r\n//       icon: <SupervisorAccount/>,\r\n//       to: `${url}/admin`\r\n//     },\r\n//     {\r\n//       name:'Stats',\r\n//       icon: <Equalizer/>,\r\n//       to: `${url}/stats`\r\n//     },\r\n//     {\r\n//       name:'Report',\r\n//       icon: <Report/>,\r\n//       to: `${url}/report`\r\n//     }\r\n//   ];\r\n\r\n//   const drawer = (\r\n//     <div>\r\n//       <div className={classes.toolbar} />\r\n//       <Divider />\r\n//       <List>\r\n//         {itemList.map((item, index) => (\r\n//           <Link to={item.to}>\r\n//           <ListItem button key={item.name}>\r\n//             <ListItemIcon>{item.icon}</ListItemIcon>\r\n//             <ListItemText primary={item.name} />\r\n//           </ListItem>\r\n//           </Link>\r\n\r\n//         ))}\r\n//       </List>\r\n//     </div>\r\n//   );\r\n\r\n//   const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n//   return (\r\n//     <div className={classes.root}>\r\n//       <CssBaseline />\r\n//       <AppBar position=\"fixed\" className={classes.appBar}>\r\n//         <Toolbar>\r\n//           <IconButton\r\n//             color=\"inherit\"\r\n//             aria-label=\"open drawer\"\r\n//             edge=\"start\"\r\n//             onClick={handleDrawerToggle}\r\n//             className={classes.menuButton}\r\n//           >\r\n//             <Menu />\r\n//           </IconButton>\r\n//           <Typography variant=\"h6\" noWrap>\r\n//             You logged as Buyer\r\n//           </Typography>\r\n//         </Toolbar>\r\n//       </AppBar>\r\n//       <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n//         {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n//         <Hidden smUp implementation=\"css\">\r\n//           <Drawer\r\n//             container={container}\r\n//             variant=\"temporary\"\r\n//             anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n//             open={mobileOpen}\r\n//             onClose={handleDrawerToggle}\r\n//             classes={{\r\n//               paper: classes.drawerPaper,\r\n//             }}\r\n//             ModalProps={{\r\n//               keepMounted: true, // Better open performance on mobile.\r\n//             }}\r\n//           >\r\n//             {drawer}\r\n//           </Drawer>\r\n//         </Hidden>\r\n//         <Hidden xsDown implementation=\"css\">\r\n//           <Drawer\r\n//             classes={{\r\n//               paper: classes.drawerPaper,\r\n//             }}\r\n//             variant=\"permanent\"\r\n//             open\r\n//           >\r\n//             {drawer}\r\n//           </Drawer>\r\n//         </Hidden>\r\n//       </nav>\r\n\r\n//       <main className={classes.content}>\r\n//         <div className={classes.toolbar} />\r\n//         <Switch>\r\n//         <Route exact path={`${path}/`}>\r\n//             Dashboard\r\n//         </Route>\r\n//         <Route exact path={`${path}/order`}>\r\n//             {/* <Orderpage/> */}\r\n//             Order\r\n//         </Route>\r\n//         <Route exact path={`${path}/message`}>\r\n//             Message\r\n//         </Route>\r\n//         <Route exact path={`${path}/admin`}>\r\n//             Admin\r\n//         </Route>\r\n//         <Route exact path={`${path}/stats`}>\r\n//             Statics\r\n//         </Route>\r\n//         <Route exact path={`${path}/report`}>\r\n//             Report\r\n//         </Route>\r\n//       </Switch>\r\n//       </main>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// ResponsiveDrawer.propTypes = {\r\n//   /**\r\n//    * Injected by the documentation to work in an iframe.\r\n//    * You won't need it on your project.\r\n//    */\r\n//   window: PropTypes.func,\r\n// };\r\n\r\n// export default ResponsiveDrawer;\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\AddanAdmin.js",["352","353","354","355","356","357"],"import React, { useEffect, Fragment } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  withStyles,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport useForm from \"../useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../actions/sellers\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    \"& .MuiTextField-root\": {\r\n      margin: theme.spacing(1),\r\n      minWidth: \"100%\",\r\n    },\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: \"100%\",\r\n  },\r\n  smMargin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n});\r\n\r\nconst initialFieldValues = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  address: \"\",\r\n  userType: \"\",\r\n  category: \"\",\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst SellersForm = ({ classes, ...props }) => {\r\n  const { addToast } = useToasts();\r\n  let history = useHistory();\r\n\r\n  const validate = (fieldValues = values) => {\r\n    let temp = { ...errors };\r\n    if (\"firstName\" in fieldValues)\r\n      temp.firstName = fieldValues.firstName ? \"\" : \"This field is required.\";\r\n    if (\"lastName\" in fieldValues)\r\n      temp.lastName = fieldValues.lastName ? \"\" : \"This field is required.\";\r\n    if (\"userTpye\" in fieldValues)\r\n      temp.userType = fieldValues.userType ? \"\" : \"This field is required.\";\r\n    if (\"password\" in fieldValues)\r\n      temp.password = fieldValues.password ? \"\" : \"This field is required.\";\r\n    if (\"category\" in fieldValues)\r\n      temp.category = fieldValues.category ? \"\" : \"This field is required.\";\r\n    if (\"email\" in fieldValues)\r\n      temp.email = /^$|.+@.+..+/.test(fieldValues.email)\r\n        ? \"\"\r\n        : \"Email is not valid.\";\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n\r\n    if (fieldValues === values)\r\n      return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm,\r\n  } = useForm(\r\n    initialFieldValues,\r\n    validate,\r\n    props.setCurrentId,\r\n    props.setOpenPopup\r\n  );\r\n\r\n  //material-ui select\r\n  //   const inputLabel = React.useRef(null);\r\n  //   const [labelWidth, setLabelWidth] = React.useState(0);\r\n  //   React.useEffect(() => {\r\n  //     setLabelWidth(inputLabel.current.offsetWidth);\r\n  //   }, []);\r\n\r\n  const setRole = (fieldValues = values) => {\r\n    fieldValues.userType = \"Admin\";\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setRole();\r\n    if (validate()) {\r\n      history.push({\r\n        pathname: \"/admin\",\r\n        state: values.email,\r\n      });\r\n      const onSuccess = () => {\r\n        resetForm();\r\n        addToast(\"Submitted successfully\", { appearance: \"success\" });\r\n      };\r\n      // if (props.currentId === 0) {\r\n      //   props.createSeller(values, onSuccess);\r\n      // } else {\r\n      //   props.updateSeller(props.currentId, values, onSuccess);\r\n      // }\r\n      props.createSeller(values, onSuccess);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.currentId !== 0) {\r\n      setValues({\r\n        ...props.sellerList.find((x) => x.userId === props.currentId),\r\n      });\r\n      setErrors({});\r\n    }\r\n  }, [props.currentId]);\r\n  return (\r\n    <Fragment>\r\n      {/* <div>\r\n        <div>\r\n          <video\r\n            style={{\r\n              alignItem: \"center\",\r\n              justifyContent: \"center\",\r\n              position: \"realative\",\r\n              zIndex: -1,\r\n              width: \"100%\",\r\n            }}\r\n            autoPlay=\"true\"\r\n            loop\r\n            muted\r\n            src=\"https://sg.fiverrcdn.com/packages_lp/cover_video.mp4\"\r\n          />\r\n        </div>\r\n      </div> */}\r\n\r\n      <section className=\"container\">\r\n        <div>\r\n          <h1 className=\"large text-primary\">Add an Admin!</h1>\r\n          <p className=\"lead\">\r\n            <i className=\"fas fa-user\"></i> Create the Profile of the new Admin\r\n          </p>\r\n        </div>\r\n        <form\r\n          autoComplete=\"off\"\r\n          noValidate\r\n          className={classes.root}\r\n          onSubmit={handleSubmit}\r\n        >\r\n          <Grid container>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                name=\"firstName\"\r\n                variant=\"outlined\"\r\n                label=\"First Name\"\r\n                value={values.firstName}\r\n                onChange={handleInputChange}\r\n                {...(errors.firstName && {\r\n                  error: true,\r\n                  helperText: errors.firstName,\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                name=\"lastName\"\r\n                variant=\"outlined\"\r\n                label=\"Last Name\"\r\n                value={values.lastName}\r\n                onChange={handleInputChange}\r\n                {...(errors.lastName && {\r\n                  error: true,\r\n                  helperText: errors.lastName,\r\n                })}\r\n              />\r\n            </Grid>\r\n            {/* <Grid item xs={12}>\r\n              <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControl}\r\n                {...(errors.category && { error: true })}\r\n              >\r\n                <InputLabel ref={inputLabel}>Category</InputLabel>\r\n                <Select\r\n                  name=\"category\"\r\n                  value={values.category}\r\n                  onChange={handleInputChange}\r\n                  labelWidth={labelWidth}\r\n                >\r\n                  <MenuItem value=\"\">Select a Category</MenuItem>\r\n                  <MenuItem value=\"illustration\">Illustration</MenuItem>\r\n                  <MenuItem value=\"albumCovers\">Album Covers</MenuItem>\r\n                  <MenuItem value=\"vectorArts\">Vector Arts</MenuItem>\r\n                  <MenuItem value=\"photoEditing\">Photo Editing</MenuItem>\r\n                  <MenuItem value=\"videoEditing\">Video Editing</MenuItem>\r\n                  <MenuItem value=\"uiDesigning\">UI Designing</MenuItem>\r\n                </Select>\r\n                {errors.category && (\r\n                  <FormHelperText>{errors.category}</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid> */}\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                name=\"email\"\r\n                variant=\"outlined\"\r\n                label=\"Email\"\r\n                value={values.email}\r\n                onChange={handleInputChange}\r\n                {...(errors.email && { error: true, helperText: errors.email })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                name=\"address\"\r\n                variant=\"outlined\"\r\n                label=\"Address\"\r\n                value={values.address}\r\n                onChange={handleInputChange}\r\n                {...(errors.address && {\r\n                  error: true,\r\n                  helperText: errors.address,\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                name=\"password\"\r\n                variant=\"outlined\"\r\n                label=\"Password\"\r\n                value={values.password}\r\n                onChange={handleInputChange}\r\n                {...(errors.password && {\r\n                  error: true,\r\n                  helperText: errors.password,\r\n                })}\r\n              />\r\n              <div>{props.currentId}</div>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <div>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className={classes.smMargin}\r\n                >\r\n                  Submit\r\n                </Button>\r\n                {/* <Button\r\n              variant=\"contained\"\r\n              className={classes.smMargin}\r\n              onClick={resetForm}\r\n            >\r\n              Reset\r\n            </Button> */}\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </section>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  sellerList: state.sellers.list,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  createSeller: actions.create,\r\n  updateSeller: actions.update,\r\n  fetchAllSellers: actions.fetchAll,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(styles)(SellersForm));\r\n\r\n// import React, { Fragment } from \"react\";\r\n\r\n// import SellerForm from \"../SellerForm\";\r\n\r\n// const Seller = () => {\r\n//   const onSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     console.log(\"Success\");\r\n//   };\r\n\r\n//   return (\r\n//     <Fragment>\r\n// <div>\r\n//   <div>\r\n//     <video\r\n//       style={{\r\n//         alignItem: \"center\",\r\n//         justifyContent: \"center\",\r\n//         position: \"realative\",\r\n//         zIndex: -1,\r\n//         width: \"100%\",\r\n//       }}\r\n//       autoPlay=\"true\"\r\n//       loop\r\n//       muted\r\n//       src={Vid}\r\n//     />\r\n//   </div>\r\n//         <section className=\"container\">\r\n//           <div>\r\n//             <h1 className=\"large text-primary\">Become a Seller!</h1>\r\n//             <p className=\"lead\">\r\n//               <i className=\"fas fa-user\"></i> Create Your Seller Profile\r\n//             </p>\r\n//             <form className=\"form\" onSubmit={(e) => onSubmit(e)}>\r\n//               <SellerForm />\r\n//               <div className=\"form-group\">\r\n//                 <input type=\"text\" placeholder=\"Name\" name=\"name\" required />\r\n//               </div>\r\n//               <div className=\"form-group\">\r\n//                 <input\r\n//                   type=\"email\"\r\n//                   placeholder=\"Email Address\"\r\n//                   name=\"email\"\r\n//                   required\r\n//                 />\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     placeholder=\"Country\"\r\n//                     name=\"country\"\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     placeholder=\"Address\"\r\n//                     name=\"address\"\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     placeholder=\"Contact No\"\r\n//                     name=\"contactNo\"\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     placeholder=\"Expertise: Illustrator, Photoshop, After Effects or Premere Pro (Type One or more)\"\r\n//                     name=\"expertise\"\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     placeholder=\"Work Time: (Select Full Time or Part Time)\"\r\n//                     name=\"workTime\"\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     placeholder=\"English Knowledge: (Select Begginer, Average or Expert)\"\r\n//                     name=\"english\"\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     placeholder=\"Exam Date: (Select a Date and Time to Participate for the Examination)\"\r\n//                     name=\"exam\"\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     placeholder=\"Employed Organizations: (If there is any)\"\r\n//                     name=\"employed\"\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <div className=\"form-group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     placeholder=\"Experience: (Average or Expert)\"\r\n//                     name=\"experience\"\r\n//                     required\r\n//                   />\r\n//                 </div>\r\n//                 <small className=\"form-text\">\r\n//                   This site uses Gravatar so if you want a profile image, use a\r\n//                   Gravatar email\r\n//                 </small>\r\n//               </div>\r\n//               <input type=\"submit\" className=\"btn btn-primary\" value=\"Submit\" />\r\n//             </form>\r\n//           </div>\r\n//         </section>\r\n//       </div>\r\n//     </Fragment>\r\n//   );\r\n// };\r\n\r\n// export default Seller;\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\LandingNav.js",["358"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navigationbar = () => {\r\n  var islogged = false;\r\n\r\n  return (\r\n    <nav className=\"navbar \">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          {/* <i class=\"fas fa-comments-dollar\"></i> JobForMe */}\r\n          <img\r\n            className=\"photo\"\r\n            src=\"https://dewey.tailorbrands.com/production/brand_version_mockup_image/765/4683342765_f43e76b4-4d93-4f52-b0e7-cc99ad1bf015.png?cb=1613721941\"\r\n          />\r\n        </Link>\r\n      </h1>\r\n      <ul>\r\n        {/* <li>\r\n          <a href=\"/admin\">Admin Panel</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/order\">Order a Service</a>\r\n        </li> */}\r\n        {/* <li>\r\n          <a href=\"/seller\">Become a Seller</a>\r\n        </li> */}\r\n        <li>\r\n          <Link to=\"/register\">Register</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/login\">Login</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/contact\">Contact Us</Link>\r\n        </li>\r\n        {islogged && (\r\n          <li>\r\n            <Link to=\"/login\">Profile</Link>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigationbar;\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\reducers\\sellers.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\useForm.js",["359","360"],"import React, { useState, useEffect } from \"react\";\r\n\r\nconst useForm = (initialFieldValues, validate, setCurrentId, setOpenPopup) => {\r\n  const [values, setValues] = useState(initialFieldValues);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    const fieldValue = { [name]: value };\r\n    setValues({\r\n      ...values,\r\n      ...fieldValue,\r\n    });\r\n    validate(fieldValue);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setValues({\r\n      ...initialFieldValues,\r\n    });\r\n    setErrors({});\r\n    setCurrentId(0);\r\n    setOpenPopup(false);\r\n  };\r\n\r\n  return {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm,\r\n  };\r\n};\r\n\r\nexport default useForm;\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\BuyerNav.js",["361","362"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navigationbar = (props) => {\r\n  var islogged = false;\r\n\r\n  return (\r\n    <nav className=\"navbar \">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          {/* <i class=\"fas fa-comments-dollar\"></i> JobForMe */}\r\n          <img\r\n            className=\"photo\"\r\n            src=\"https://dewey.tailorbrands.com/production/brand_version_mockup_image/765/4683342765_f43e76b4-4d93-4f52-b0e7-cc99ad1bf015.png?cb=1613721941\"\r\n          />\r\n        </Link>\r\n      </h1>\r\n      <ul>\r\n        {/* <li>\r\n          <a href=\"/admin\">Admin Panel</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/order\">Order a Service</a>\r\n        </li> */}\r\n        <li>\r\n          <a href=\"/seller\">Become a Seller</a>\r\n        </li>\r\n        {/* <li>\r\n          <Link to=\"/register\">Register</Link>\r\n        </li> */}\r\n\r\n        <li>\r\n          <Link to=\"/contact\">Contact Us</Link>\r\n        </li>\r\n        <li>\r\n          <Link\r\n            to={{\r\n              pathname: \"/buyerprofile\",\r\n              state: props.buyerEmail,\r\n            }}\r\n          >\r\n            Profile\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/\">Logout</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigationbar;\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\actions\\sellers.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\Popup.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\SellerForm.js",["363"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  withStyles,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport useForm from \"./useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/sellers\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    \"& .MuiTextField-root\": {\r\n      margin: theme.spacing(1),\r\n      minWidth: \"100%\",\r\n    },\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: \"100%\",\r\n  },\r\n  smMargin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n});\r\n\r\nconst initialFieldValues = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  address: \"\",\r\n  userType: \"Seller\",\r\n  category: \"\",\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst SellersForm = ({ classes, ...props }) => {\r\n  const { addToast } = useToasts();\r\n\r\n  const validate = (fieldValues = values) => {\r\n    let temp = { ...errors };\r\n    if (\"firstName\" in fieldValues)\r\n      temp.firstName = fieldValues.firstName ? \"\" : \"This field is required.\";\r\n    if (\"lastName\" in fieldValues)\r\n      temp.lastName = fieldValues.lastName ? \"\" : \"This field is required.\";\r\n    if (\"userTpye\" in fieldValues)\r\n      temp.userType = fieldValues.userType ? \"\" : \"This field is required.\";\r\n    if (\"password\" in fieldValues)\r\n      temp.password = fieldValues.password ? \"\" : \"This field is required.\";\r\n    if (\"category\" in fieldValues)\r\n      temp.category = fieldValues.category ? \"\" : \"This field is required.\";\r\n    if (\"email\" in fieldValues)\r\n      temp.email = /^$|.+@.+..+/.test(fieldValues.email)\r\n        ? \"\"\r\n        : \"Email is not valid.\";\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n\r\n    if (fieldValues === values)\r\n      return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n\r\n  const {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm,\r\n  } = useForm(\r\n    initialFieldValues,\r\n    validate,\r\n    props.setCurrentId,\r\n    props.setOpenPopup\r\n  );\r\n\r\n  //material-ui select\r\n  const inputLabel = React.useRef(null);\r\n  const [labelWidth, setLabelWidth] = React.useState(0);\r\n  React.useEffect(() => {\r\n    setLabelWidth(inputLabel.current.offsetWidth);\r\n  }, []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      const onSuccess = () => {\r\n        resetForm();\r\n        addToast(\"Submitted successfully\", { appearance: \"success\" });\r\n      };\r\n      if (props.currentId === 0) {\r\n        props.createSeller(values, onSuccess);\r\n      } else {\r\n        props.updateSeller(props.currentId, values, onSuccess);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.currentId !== 0) {\r\n      setValues({\r\n        ...props.sellerList.find((x) => x.userId === props.currentId),\r\n      });\r\n      setErrors({});\r\n    }\r\n  }, [props.currentId]);\r\n  return (\r\n    <form\r\n      autoComplete=\"off\"\r\n      noValidate\r\n      className={classes.root}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <Grid container>\r\n        <Grid item xs={6}>\r\n          <TextField\r\n            name=\"firstName\"\r\n            variant=\"outlined\"\r\n            label=\"First Name\"\r\n            value={values.firstName}\r\n            onChange={handleInputChange}\r\n            {...(errors.firstName && {\r\n              error: true,\r\n              helperText: errors.firstName,\r\n            })}\r\n          />\r\n          <TextField\r\n            name=\"lastName\"\r\n            variant=\"outlined\"\r\n            label=\"Last Name\"\r\n            value={values.lastName}\r\n            onChange={handleInputChange}\r\n            {...(errors.lastName && {\r\n              error: true,\r\n              helperText: errors.lastName,\r\n            })}\r\n          />\r\n          <FormControl\r\n            variant=\"outlined\"\r\n            className={classes.formControl}\r\n            {...(errors.category && { error: true })}\r\n          >\r\n            <InputLabel ref={inputLabel}>Category</InputLabel>\r\n            <Select\r\n              name=\"category\"\r\n              value={values.category}\r\n              onChange={handleInputChange}\r\n              labelWidth={labelWidth}\r\n            >\r\n              <MenuItem value=\"\">Select a Category</MenuItem>\r\n              <MenuItem value=\"illustration\">Illustration</MenuItem>\r\n              <MenuItem value=\"albumCovers\">Album Covers</MenuItem>\r\n              <MenuItem value=\"vectorArts\">Vector Arts</MenuItem>\r\n              <MenuItem value=\"photoEditing\">Photo Editing</MenuItem>\r\n              <MenuItem value=\"videoEditing\">Video Editing</MenuItem>\r\n              <MenuItem value=\"uiDesigning\">UI Designing</MenuItem>\r\n            </Select>\r\n            {errors.category && (\r\n              <FormHelperText>{errors.category}</FormHelperText>\r\n            )}\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <TextField\r\n            name=\"email\"\r\n            variant=\"outlined\"\r\n            label=\"Email\"\r\n            value={values.email}\r\n            onChange={handleInputChange}\r\n            {...(errors.email && { error: true, helperText: errors.email })}\r\n          />\r\n          <TextField\r\n            name=\"address\"\r\n            variant=\"outlined\"\r\n            label=\"Address\"\r\n            value={values.address}\r\n            onChange={handleInputChange}\r\n            {...(errors.address && { error: true, helperText: errors.address })}\r\n          />\r\n          {/* <TextField\r\n            name=\"password\"\r\n            variant=\"outlined\"\r\n            label=\"Password\"\r\n            value={values.password}\r\n            onChange={handleInputChange}\r\n            {...(errors.password && {\r\n              error: true,\r\n              helperText: errors.password,\r\n            })}\r\n          />\r\n          <div>{props.currentId}</div> */}\r\n          <div>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              className={classes.smMargin}\r\n            >\r\n              Submit\r\n            </Button>\r\n            {/* <Button\r\n              variant=\"contained\"\r\n              className={classes.smMargin}\r\n              onClick={resetForm}\r\n            >\r\n              Reset\r\n            </Button> */}\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  sellerList: state.sellers.list,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  createSeller: actions.create,\r\n  updateSeller: actions.update,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(styles)(SellersForm));\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\Employee.js",["364","365","366","367","368","369","370","371","372","373","374","375","376"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  TextField,\r\n  withStyles,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n    margin: 0,\r\n    padding: 10,\r\n  },\r\n});\r\n\r\nconst defaultImageSrc = \"https://www.w3schools.com/w3images/avatar2.png\";\r\n\r\nconst initialFieldValues = {\r\n  employeeID: 0,\r\n  employeeName: \"\",\r\n  occupation: \"\",\r\n  imageName: \"\",\r\n  imageSrc: defaultImageSrc,\r\n  imageFile: null,\r\n};\r\n\r\nexport default function Employee(props) {\r\n  const classes = useStyles();\r\n\r\n  const { addOrEdit, recordForEdit } = props;\r\n\r\n  const [values, setValues] = useState(initialFieldValues);\r\n  const [errors, setErrors] = useState({});\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (recordForEdit != null) setValues(recordForEdit);\r\n  }, [recordForEdit]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const showPreview = (e) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      let imageFile = e.target.files[0];\r\n      const reader = new FileReader();\r\n      reader.onload = (x) => {\r\n        setValues({\r\n          ...values,\r\n          imageFile,\r\n          imageSrc: x.target.result,\r\n        });\r\n      };\r\n      reader.readAsDataURL(imageFile);\r\n    } else {\r\n      setValues({\r\n        ...values,\r\n        imageFile: null,\r\n        imageSrc: defaultImageSrc,\r\n      });\r\n    }\r\n  };\r\n\r\n  const validate = () => {\r\n    let temp = {};\r\n    temp.employeeName = values.employeeName == \"\" ? false : true;\r\n    temp.imageSrc = values.imageSrc == defaultImageSrc ? false : true;\r\n    setErrors(temp);\r\n    return Object.values(temp).every((x) => x == true);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setValues(initialFieldValues);\r\n    document.getElementById(\"image-uploader\").value = null;\r\n    setErrors({});\r\n  };\r\n\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      const formData = new FormData();\r\n      formData.append(\"employeeID\", values.employeeID);\r\n      formData.append(\"employeeName\", values.employeeName);\r\n      formData.append(\"occupation\", values.occupation);\r\n      formData.append(\"imageName\", values.imageName);\r\n      formData.append(\"imageFile\", values.imageFile);\r\n      addOrEdit(formData, resetForm);\r\n    }\r\n  };\r\n\r\n  const applyErrorClass = (field) =>\r\n    field in errors && errors[field] == false ? \" invalid-field\" : \"\";\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"container text-center\">\r\n        <p className=\"lead\">An Employee</p>\r\n      </div> */}\r\n      <form autoComplete=\"off\" noValidate onSubmit={handleFormSubmit}>\r\n        <Card className={classes.root}>\r\n          <CardActionArea>\r\n            <CardMedia\r\n              component=\"img\"\r\n              alt=\"Contemplative Reptile\"\r\n              height=\"140\"\r\n              image={values.imageSrc}\r\n              title=\"Contemplative Reptile\"\r\n            />\r\n            <CardContent>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                Choose your profile picture.\r\n              </Typography>\r\n              <TextField\r\n                type=\"file\"\r\n                variant=\"standard\"\r\n                accept=\"image/*\"\r\n                className={\"form-control-file\" + applyErrorClass(\"imageSrc\")}\r\n                onChange={showPreview}\r\n                id=\"image-uploader\"\r\n              />\r\n              <br />\r\n              <br />\r\n\r\n              <TextField\r\n                variant=\"outlined\"\r\n                className={\"form-control\" + applyErrorClass(\"employeeName\")}\r\n                placeholder=\"Employee Name\"\r\n                name=\"employeeName\"\r\n                value={values.employeeName}\r\n                onChange={handleInputChange}\r\n              />\r\n              <br />\r\n              <br />\r\n\r\n              <TextField\r\n                variant=\"outlined\"\r\n                className=\"form-control\"\r\n                placeholder=\"Occupation\"\r\n                name=\"occupation\"\r\n                value={values.occupation}\r\n                onChange={handleInputChange}\r\n              />\r\n            </CardContent>\r\n          </CardActionArea>\r\n          <CardActions>\r\n            <Button type=\"submit\" className=\"btn btn-light\">\r\n              Submit\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n        {/* <div className=\"card\">\r\n          <img src={values.imageSrc} className=\"card-img-top\" />\r\n          <div className=\"card-body\">\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                className={\"form-control-file\" + applyErrorClass(\"imageSrc\")}\r\n                onChange={showPreview}\r\n                id=\"image-uploader\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                className={\"form-control\" + applyErrorClass(\"employeeName\")}\r\n                placeholder=\"Employee Name\"\r\n                name=\"employeeName\"\r\n                value={values.employeeName}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                className=\"form-control\"\r\n                placeholder=\"Occupation\"\r\n                name=\"occupation\"\r\n                value={values.occupation}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group text-center\">\r\n              <button type=\"submit\" className=\"btn btn-light\">\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div> */}\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\AdminNav.js",["377","378"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navigationbar = (props) => {\r\n  var islogged = false;\r\n\r\n  return (\r\n    <nav className=\"navbar \">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          {/* <i class=\"fas fa-comments-dollar\"></i> JobForMe */}\r\n          <img\r\n            className=\"photo\"\r\n            src=\"https://dewey.tailorbrands.com/production/brand_version_mockup_image/765/4683342765_f43e76b4-4d93-4f52-b0e7-cc99ad1bf015.png?cb=1613721941\"\r\n          />\r\n        </Link>\r\n      </h1>\r\n      <ul>\r\n        {/* <li>\r\n          <a href=\"/admin\">Admin Panel</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/order\">Order a Service</a>\r\n        </li> */}\r\n        {/* <li>\r\n          <a href=\"/seller\">Become a Seller</a>\r\n        </li> */}\r\n        {/* <li>\r\n          <Link to=\"/register\">Register</Link>\r\n        </li> */}\r\n        <li>\r\n          <Link to=\"/\">Logout</Link>\r\n        </li>\r\n        {/* <li>\r\n          <Link to=\"/contact\">Contact Us</Link>\r\n        </li> */}\r\n\r\n        <li>\r\n          <Link\r\n            to={{\r\n              pathname: \"/adminprofile\",\r\n              state: props.adminEmail,\r\n            }}\r\n          >\r\n            Profile\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigationbar;\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\layout\\SellerNav.js",["379","380"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navigationbar = (props) => {\r\n  var islogged = false;\r\n\r\n  return (\r\n    <nav className=\"navbar \">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          {/* <i class=\"fas fa-comments-dollar\"></i> JobForMe */}\r\n          <img\r\n            className=\"photo\"\r\n            src=\"https://dewey.tailorbrands.com/production/brand_version_mockup_image/765/4683342765_f43e76b4-4d93-4f52-b0e7-cc99ad1bf015.png?cb=1613721941\"\r\n          />\r\n        </Link>\r\n      </h1>\r\n      <ul>\r\n        {/* <li>\r\n          <a href=\"/admin\">Admin Panel</a>\r\n        </li>\r\n        <li>\r\n          <a href=\"/order\">Order a Service</a>\r\n        </li> */}\r\n        {/* <li>\r\n          <a href=\"/seller\">Become a Seller</a>\r\n        </li> */}\r\n        {/* <li>\r\n          <Link to=\"/register\">Register</Link>\r\n        </li> */}\r\n\r\n        <li>\r\n          <Link to=\"/contact\">Contact Admin</Link>\r\n        </li>\r\n        <li>\r\n          <Link\r\n            to={{\r\n              pathname: \"/sellerprofile\",\r\n              state: props.sellerEmail,\r\n            }}\r\n          >\r\n            Profile\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/\">Logout</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigationbar;\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\actions\\api.js",["381"],"import axios from \"axios\";\r\n\r\nconst baseUrl = \"https://localhost:5001/api/\";\r\n\r\nexport default {\r\n  sellers(url = baseUrl + \"user/\") {\r\n    return {\r\n      fetchAll: () => axios.get(url),\r\n      fetchById: (id) => axios.get(url + id),\r\n      create: (newRecord) => axios.post(url, newRecord),\r\n      update: (id, updatedRecord) => axios.put(url + id, updatedRecord),\r\n      delete: (id) => axios.delete(url + id),\r\n    };\r\n  },\r\n};\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\Chat\\Chat.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\Chat\\ChatInput\\ChatInput.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\Chat\\ChatWindow\\ChatWindow.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\Chat\\ChatWindow\\Message\\Message.js",[],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\components\\pages\\Admin.js",["382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../actions/sellers\";\r\nimport {\r\n  Grid,\r\n  Paper,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  withStyles,\r\n  ButtonGroup,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport EmployeeList from \"../EmployeeList\";\r\n\r\nimport AdminNav from \"../layout/AdminNav\";\r\nimport Footer from \"../layout/Footer\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    \"& .MuiTableCell-head\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(2),\r\n    padding: theme.spacing(2),\r\n  },\r\n  card: {\r\n    maxWidth: 345,\r\n    margin: 0,\r\n    padding: 10,\r\n  },\r\n});\r\n\r\nconst Sellers = ({ classes, ...props }) => {\r\n  const { addToast } = useToasts();\r\n\r\n  const history = useHistory();\r\n  console.log(history.location.state);\r\n  const adminId = history.location.state;\r\n\r\n  const [currentId, setCurrentId] = useState(0);\r\n\r\n  useEffect(() => {\r\n    props.fetchAllSellers();\r\n  }, []);\r\n\r\n  const onDelete = (id) => {\r\n    if (window.confirm(\"Are you sure to delete this record?\"))\r\n      props.deleteSeller(id, () =>\r\n        addToast(\"Deleted successfully\", { appearance: \"info\" })\r\n      );\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <AdminNav {...{ adminId }} />\r\n      <section className=\"container\">\r\n        <Grid container spacing={1}>\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <Link to=\"/buyers\">\r\n            <Card className={classes.card}>\r\n              <CardActionArea>\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  alt=\"Contemplative Reptile\"\r\n                  height=\"140\"\r\n                  image=\"https://images.unsplash.com/photo-1594835494259-43c6e66ad369?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1052&q=80\"\r\n                  title=\"Contemplative Reptile\"\r\n                />\r\n                <CardContent>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Buyers\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    color=\"textSecondary\"\r\n                    component=\"p\"\r\n                  >\r\n                    View add or Delete Buyers!\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    color=\"textSecondary\"\r\n                    component=\"p\"\r\n                  >\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      color=\"textSecondary\"\r\n                      component=\"p\"\r\n                    >\r\n                      Click on the edit button to make changes\r\n                    </Typography>\r\n                  </Typography>\r\n                </CardContent>\r\n              </CardActionArea>\r\n              <CardActions>\r\n                {/* <Button size=\"small\" color=\"primary\">\r\n              Buyers' List\r\n            </Button> */}\r\n                {/* <Link to=\"/seller\" className=\"btn btn-primary\">\r\n              Buyers' List\r\n            </Link> */}\r\n                {/* <Button size=\"small\" color=\"primary\">\r\n                Add a Buyer\r\n              </Button> */}\r\n              </CardActions>\r\n            </Card>\r\n          </Link>\r\n          <Link to=\"/sellers\">\r\n            <Card className={classes.card}>\r\n              <CardActionArea>\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  alt=\"Contemplative Reptile\"\r\n                  height=\"140\"\r\n                  image=\"https://images.unsplash.com/photo-1534683251650-3fd64cd1561a?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1020&q=80\"\r\n                  title=\"Contemplative Reptile\"\r\n                />\r\n                <CardContent>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Sellers\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    color=\"textSecondary\"\r\n                    component=\"p\"\r\n                  >\r\n                    Click on the Add New button to add or click on the profiles\r\n                    to make changes.\r\n                  </Typography>\r\n                </CardContent>\r\n              </CardActionArea>\r\n              <CardActions>\r\n                {/* <Button size=\"small\" color=\"primary\">\r\n                Sellers' List\r\n              </Button>\r\n              <Button size=\"small\" color=\"primary\">\r\n                Add a Seller\r\n              </Button> */}\r\n              </CardActions>\r\n            </Card>\r\n          </Link>\r\n          <Link to=\"/admins\">\r\n            <Card className={classes.card}>\r\n              <CardActionArea>\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  alt=\"Contemplative Reptile\"\r\n                  height=\"140\"\r\n                  image=\"https://images.unsplash.com/photo-1509315703195-529879416a7d?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80\"\r\n                  title=\"Contemplative Reptile\"\r\n                />\r\n                <CardContent>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    Admins\r\n                  </Typography>\r\n                  {/* <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                Lizards are a widespread group of squamate reptiles, with over\r\n                6,000 species, ranging across all continents except Antarctica\r\n              </Typography> */}\r\n                </CardContent>\r\n              </CardActionArea>\r\n              <CardActions>\r\n                {/* <Button size=\"small\" color=\"primary\">\r\n              Orders' List\r\n            </Button>\r\n            <Button size=\"small\" color=\"primary\">\r\n              Place a Order\r\n            </Button> */}\r\n              </CardActions>\r\n            </Card>\r\n          </Link>\r\n        </Grid>\r\n        {/* <Paper className={classes.paper} elevation={3}>\r\n        <Grid>\r\n          <Grid item xs={6}>\r\n            <TableContainer>\r\n              <Table>\r\n                <TableHead className={classes.root}>\r\n                  <TableRow>\r\n                    <TableCell>First Name</TableCell>\r\n                    <TableCell>Last Name</TableCell>\r\n                    <TableCell></TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {props.sellerList.map((record, index) => {\r\n                    return (\r\n                      <TableRow key={index} hover>\r\n                        <TableCell>{record.firstName}</TableCell>\r\n                        <TableCell>{record.lastName}</TableCell>\r\n                        <TableCell>\r\n                          <ButtonGroup variant=\"text\">\r\n                            <Button>\r\n                              <EditIcon\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                  setCurrentId(record.userId);\r\n                                }}\r\n                              />\r\n                            </Button>\r\n                            <Button>\r\n                              <DeleteIcon\r\n                                color=\"secondary\"\r\n                                onClick={() => onDelete(record.userId)}\r\n                              />\r\n                            </Button>\r\n                          </ButtonGroup>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      <EmployeeList /> */}\r\n      </section>\r\n      <Footer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  sellerList: state.sellers.list,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  fetchAllSellers: actions.fetchAll,\r\n  deleteSeller: actions.Delete,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(styles)(Sellers));\r\n","E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\models\\order.model.js",["399"],"E:\\Project\\OnlineFreelancinPlatform\\OnlineFreelancinPlatform\\client\\src\\models\\user.model.js",[],{"ruleId":"400","severity":1,"message":"401","line":4,"column":8,"nodeType":"402","messageId":"403","endLine":4,"endColumn":12},{"ruleId":"404","replacedBy":"405"},{"ruleId":"406","replacedBy":"407"},{"ruleId":"400","severity":1,"message":"408","line":4,"column":8,"nodeType":"402","messageId":"403","endLine":4,"endColumn":18},{"ruleId":"400","severity":1,"message":"409","line":6,"column":8,"nodeType":"402","messageId":"403","endLine":6,"endColumn":18},{"ruleId":"400","severity":1,"message":"410","line":13,"column":8,"nodeType":"402","messageId":"403","endLine":13,"endColumn":20},{"ruleId":"400","severity":1,"message":"411","line":20,"column":8,"nodeType":"402","messageId":"403","endLine":20,"endColumn":20},{"ruleId":"400","severity":1,"message":"412","line":29,"column":8,"nodeType":"402","messageId":"403","endLine":29,"endColumn":13},{"ruleId":"413","severity":1,"message":"414","line":26,"column":13,"nodeType":"415","endLine":31,"endColumn":14},{"ruleId":"413","severity":1,"message":"414","line":43,"column":13,"nodeType":"415","endLine":48,"endColumn":14},{"ruleId":"413","severity":1,"message":"414","line":51,"column":13,"nodeType":"415","endLine":57,"endColumn":14},{"ruleId":"404","replacedBy":"416"},{"ruleId":"406","replacedBy":"417"},{"ruleId":"400","severity":1,"message":"418","line":1,"column":17,"nodeType":"402","messageId":"403","endLine":1,"endColumn":25},{"ruleId":"400","severity":1,"message":"419","line":2,"column":10,"nodeType":"402","messageId":"403","endLine":2,"endColumn":14},{"ruleId":"400","severity":1,"message":"420","line":2,"column":16,"nodeType":"402","messageId":"403","endLine":2,"endColumn":24},{"ruleId":"400","severity":1,"message":"421","line":3,"column":10,"nodeType":"402","messageId":"403","endLine":3,"endColumn":17},{"ruleId":"400","severity":1,"message":"422","line":4,"column":8,"nodeType":"402","messageId":"403","endLine":4,"endColumn":17},{"ruleId":"400","severity":1,"message":"423","line":102,"column":7,"nodeType":"402","messageId":"403","endLine":102,"endColumn":22},{"ruleId":"400","severity":1,"message":"424","line":1,"column":8,"nodeType":"402","messageId":"403","endLine":1,"endColumn":13},{"ruleId":"425","severity":1,"message":"426","line":5,"column":1,"nodeType":"427","endLine":16,"endColumn":2},{"ruleId":"425","severity":1,"message":"426","line":19,"column":1,"nodeType":"427","endLine":54,"endColumn":2},{"ruleId":"400","severity":1,"message":"418","line":1,"column":17,"nodeType":"402","messageId":"403","endLine":1,"endColumn":25},{"ruleId":"400","severity":1,"message":"428","line":16,"column":9,"nodeType":"402","messageId":"403","endLine":16,"endColumn":18},{"ruleId":"400","severity":1,"message":"429","line":1,"column":10,"nodeType":"402","messageId":"403","endLine":1,"endColumn":16},{"ruleId":"400","severity":1,"message":"430","line":2,"column":15,"nodeType":"402","messageId":"403","endLine":2,"endColumn":24},{"ruleId":"400","severity":1,"message":"431","line":8,"column":10,"nodeType":"402","messageId":"403","endLine":8,"endColumn":17},{"ruleId":"400","severity":1,"message":"432","line":9,"column":9,"nodeType":"402","messageId":"403","endLine":9,"endColumn":27},{"ruleId":"400","severity":1,"message":"433","line":12,"column":7,"nodeType":"402","messageId":"403","endLine":12,"endColumn":12},{"ruleId":"434","severity":1,"message":"435","line":34,"column":6,"nodeType":"436","endLine":34,"endColumn":8,"suggestions":"437"},{"ruleId":"400","severity":1,"message":"438","line":39,"column":25,"nodeType":"402","messageId":"403","endLine":39,"endColumn":41},{"ruleId":"400","severity":1,"message":"439","line":6,"column":18,"nodeType":"402","messageId":"403","endLine":6,"endColumn":27},{"ruleId":"400","severity":1,"message":"440","line":7,"column":8,"nodeType":"402","messageId":"403","endLine":7,"endColumn":20},{"ruleId":"400","severity":1,"message":"441","line":49,"column":12,"nodeType":"402","messageId":"403","endLine":49,"endColumn":22},{"ruleId":"400","severity":1,"message":"442","line":49,"column":24,"nodeType":"402","messageId":"403","endLine":49,"endColumn":37},{"ruleId":"400","severity":1,"message":"443","line":50,"column":12,"nodeType":"402","messageId":"403","endLine":50,"endColumn":22},{"ruleId":"400","severity":1,"message":"444","line":50,"column":24,"nodeType":"402","messageId":"403","endLine":50,"endColumn":37},{"ruleId":"400","severity":1,"message":"445","line":51,"column":22,"nodeType":"402","messageId":"403","endLine":51,"endColumn":33},{"ruleId":"400","severity":1,"message":"446","line":53,"column":12,"nodeType":"402","messageId":"403","endLine":53,"endColumn":25},{"ruleId":"400","severity":1,"message":"447","line":53,"column":47,"nodeType":"402","messageId":"403","endLine":53,"endColumn":51},{"ruleId":"400","severity":1,"message":"448","line":53,"column":52,"nodeType":"402","messageId":"403","endLine":53,"endColumn":57},{"ruleId":"400","severity":1,"message":"449","line":53,"column":64,"nodeType":"402","messageId":"403","endLine":53,"endColumn":72},{"ruleId":"400","severity":1,"message":"450","line":72,"column":11,"nodeType":"402","messageId":"403","endLine":72,"endColumn":30},{"ruleId":"400","severity":1,"message":"451","line":75,"column":11,"nodeType":"402","messageId":"403","endLine":75,"endColumn":21},{"ruleId":"400","severity":1,"message":"452","line":79,"column":11,"nodeType":"402","messageId":"403","endLine":79,"endColumn":22},{"ruleId":"453","severity":1,"message":"454","line":99,"column":34,"nodeType":"455","messageId":"456","endLine":99,"endColumn":36},{"ruleId":"434","severity":1,"message":"457","line":36,"column":5,"nodeType":"402","endLine":36,"endColumn":14,"suggestions":"458"},{"ruleId":"400","severity":1,"message":"459","line":14,"column":8,"nodeType":"402","messageId":"403","endLine":14,"endColumn":17},{"ruleId":"434","severity":1,"message":"460","line":41,"column":6,"nodeType":"436","endLine":41,"endColumn":8,"suggestions":"461"},{"ruleId":"453","severity":1,"message":"454","line":63,"column":36,"nodeType":"455","messageId":"456","endLine":63,"endColumn":38},{"ruleId":"462","severity":1,"message":"463","line":104,"column":7,"nodeType":"415","endLine":104,"endColumn":74},{"ruleId":"464","severity":1,"message":"465","line":207,"column":1,"nodeType":"466","messageId":"467","endLine":237,"endColumn":2},{"ruleId":"434","severity":1,"message":"468","line":49,"column":6,"nodeType":"436","endLine":49,"endColumn":8,"suggestions":"469"},{"ruleId":"470","severity":1,"message":"471","line":81,"column":59,"nodeType":"472","messageId":"473","endLine":81,"endColumn":61},{"ruleId":"434","severity":1,"message":"468","line":46,"column":6,"nodeType":"436","endLine":46,"endColumn":8,"suggestions":"474"},{"ruleId":"470","severity":1,"message":"471","line":78,"column":59,"nodeType":"472","messageId":"473","endLine":78,"endColumn":61},{"ruleId":"434","severity":1,"message":"468","line":46,"column":6,"nodeType":"436","endLine":46,"endColumn":8,"suggestions":"475"},{"ruleId":"470","severity":1,"message":"471","line":78,"column":59,"nodeType":"472","messageId":"473","endLine":78,"endColumn":61},{"ruleId":"404","replacedBy":"476"},{"ruleId":"406","replacedBy":"477"},{"ruleId":"434","severity":1,"message":"468","line":48,"column":6,"nodeType":"436","endLine":48,"endColumn":8,"suggestions":"478"},{"ruleId":"470","severity":1,"message":"471","line":80,"column":59,"nodeType":"472","messageId":"473","endLine":80,"endColumn":61},{"ruleId":"434","severity":1,"message":"468","line":47,"column":6,"nodeType":"436","endLine":47,"endColumn":8,"suggestions":"479"},{"ruleId":"470","severity":1,"message":"471","line":79,"column":59,"nodeType":"472","messageId":"473","endLine":79,"endColumn":61},{"ruleId":"434","severity":1,"message":"468","line":48,"column":6,"nodeType":"436","endLine":48,"endColumn":8,"suggestions":"480"},{"ruleId":"470","severity":1,"message":"471","line":80,"column":59,"nodeType":"472","messageId":"473","endLine":80,"endColumn":61},{"ruleId":"400","severity":1,"message":"481","line":7,"column":3,"nodeType":"402","messageId":"403","endLine":7,"endColumn":8},{"ruleId":"400","severity":1,"message":"482","line":8,"column":3,"nodeType":"402","messageId":"403","endLine":8,"endColumn":17},{"ruleId":"400","severity":1,"message":"483","line":9,"column":3,"nodeType":"402","messageId":"403","endLine":9,"endColumn":8},{"ruleId":"400","severity":1,"message":"459","line":10,"column":3,"nodeType":"402","messageId":"403","endLine":10,"endColumn":12},{"ruleId":"400","severity":1,"message":"484","line":11,"column":3,"nodeType":"402","messageId":"403","endLine":11,"endColumn":11},{"ruleId":"400","severity":1,"message":"485","line":12,"column":3,"nodeType":"402","messageId":"403","endLine":12,"endColumn":12},{"ruleId":"400","severity":1,"message":"486","line":13,"column":3,"nodeType":"402","messageId":"403","endLine":13,"endColumn":12},{"ruleId":"400","severity":1,"message":"487","line":15,"column":3,"nodeType":"402","messageId":"403","endLine":15,"endColumn":14},{"ruleId":"400","severity":1,"message":"429","line":16,"column":3,"nodeType":"402","messageId":"403","endLine":16,"endColumn":9},{"ruleId":"400","severity":1,"message":"488","line":18,"column":10,"nodeType":"402","messageId":"403","endLine":18,"endColumn":20},{"ruleId":"400","severity":1,"message":"489","line":25,"column":8,"nodeType":"402","messageId":"403","endLine":25,"endColumn":16},{"ruleId":"400","severity":1,"message":"490","line":26,"column":8,"nodeType":"402","messageId":"403","endLine":26,"endColumn":18},{"ruleId":"400","severity":1,"message":"411","line":28,"column":8,"nodeType":"402","messageId":"403","endLine":28,"endColumn":20},{"ruleId":"400","severity":1,"message":"491","line":55,"column":10,"nodeType":"402","messageId":"403","endLine":55,"endColumn":19},{"ruleId":"400","severity":1,"message":"492","line":55,"column":21,"nodeType":"402","messageId":"403","endLine":55,"endColumn":33},{"ruleId":"434","severity":1,"message":"468","line":59,"column":6,"nodeType":"436","endLine":59,"endColumn":8,"suggestions":"493"},{"ruleId":"400","severity":1,"message":"494","line":61,"column":9,"nodeType":"402","messageId":"403","endLine":61,"endColumn":17},{"ruleId":"400","severity":1,"message":"495","line":1,"column":28,"nodeType":"402","messageId":"403","endLine":1,"endColumn":36},{"ruleId":"400","severity":1,"message":"420","line":2,"column":10,"nodeType":"402","messageId":"403","endLine":2,"endColumn":18},{"ruleId":"400","severity":1,"message":"496","line":8,"column":3,"nodeType":"402","messageId":"403","endLine":8,"endColumn":14},{"ruleId":"400","severity":1,"message":"497","line":9,"column":3,"nodeType":"402","messageId":"403","endLine":9,"endColumn":13},{"ruleId":"400","severity":1,"message":"498","line":10,"column":3,"nodeType":"402","messageId":"403","endLine":10,"endColumn":9},{"ruleId":"400","severity":1,"message":"499","line":11,"column":3,"nodeType":"402","messageId":"403","endLine":11,"endColumn":11},{"ruleId":"400","severity":1,"message":"500","line":13,"column":3,"nodeType":"402","messageId":"403","endLine":13,"endColumn":17},{"ruleId":"400","severity":1,"message":"501","line":50,"column":11,"nodeType":"402","messageId":"403","endLine":50,"endColumn":19},{"ruleId":"400","severity":1,"message":"502","line":77,"column":9,"nodeType":"402","messageId":"403","endLine":77,"endColumn":16},{"ruleId":"400","severity":1,"message":"503","line":87,"column":5,"nodeType":"402","messageId":"403","endLine":87,"endColumn":14},{"ruleId":"434","severity":1,"message":"504","line":169,"column":6,"nodeType":"436","endLine":169,"endColumn":23,"suggestions":"505"},{"ruleId":"400","severity":1,"message":"496","line":6,"column":3,"nodeType":"402","messageId":"403","endLine":6,"endColumn":14},{"ruleId":"400","severity":1,"message":"497","line":7,"column":3,"nodeType":"402","messageId":"403","endLine":7,"endColumn":13},{"ruleId":"400","severity":1,"message":"498","line":8,"column":3,"nodeType":"402","messageId":"403","endLine":8,"endColumn":9},{"ruleId":"400","severity":1,"message":"499","line":9,"column":3,"nodeType":"402","messageId":"403","endLine":9,"endColumn":11},{"ruleId":"400","severity":1,"message":"500","line":11,"column":3,"nodeType":"402","messageId":"403","endLine":11,"endColumn":17},{"ruleId":"434","severity":1,"message":"504","line":126,"column":6,"nodeType":"436","endLine":126,"endColumn":23,"suggestions":"506"},{"ruleId":"462","severity":1,"message":"463","line":12,"column":11,"nodeType":"415","endLine":15,"endColumn":13},{"ruleId":"400","severity":1,"message":"424","line":1,"column":8,"nodeType":"402","messageId":"403","endLine":1,"endColumn":13},{"ruleId":"400","severity":1,"message":"507","line":1,"column":27,"nodeType":"402","messageId":"403","endLine":1,"endColumn":36},{"ruleId":"400","severity":1,"message":"508","line":5,"column":7,"nodeType":"402","messageId":"403","endLine":5,"endColumn":15},{"ruleId":"462","severity":1,"message":"463","line":12,"column":11,"nodeType":"415","endLine":15,"endColumn":13},{"ruleId":"434","severity":1,"message":"504","line":114,"column":6,"nodeType":"436","endLine":114,"endColumn":23,"suggestions":"509"},{"ruleId":"400","severity":1,"message":"510","line":2,"column":10,"nodeType":"402","messageId":"403","endLine":2,"endColumn":14},{"ruleId":"400","severity":1,"message":"511","line":13,"column":3,"nodeType":"402","messageId":"403","endLine":13,"endColumn":13},{"ruleId":"400","severity":1,"message":"496","line":14,"column":3,"nodeType":"402","messageId":"403","endLine":14,"endColumn":14},{"ruleId":"400","severity":1,"message":"497","line":15,"column":3,"nodeType":"402","messageId":"403","endLine":15,"endColumn":13},{"ruleId":"400","severity":1,"message":"498","line":16,"column":3,"nodeType":"402","messageId":"403","endLine":16,"endColumn":9},{"ruleId":"400","severity":1,"message":"499","line":17,"column":3,"nodeType":"402","messageId":"403","endLine":17,"endColumn":11},{"ruleId":"400","severity":1,"message":"500","line":18,"column":3,"nodeType":"402","messageId":"403","endLine":18,"endColumn":17},{"ruleId":"400","severity":1,"message":"512","line":47,"column":10,"nodeType":"402","messageId":"403","endLine":47,"endColumn":19},{"ruleId":"400","severity":1,"message":"513","line":47,"column":21,"nodeType":"402","messageId":"403","endLine":47,"endColumn":33},{"ruleId":"453","severity":1,"message":"454","line":84,"column":45,"nodeType":"455","messageId":"456","endLine":84,"endColumn":47},{"ruleId":"453","severity":1,"message":"454","line":85,"column":37,"nodeType":"455","messageId":"456","endLine":85,"endColumn":39},{"ruleId":"453","severity":1,"message":"454","line":87,"column":47,"nodeType":"455","messageId":"456","endLine":87,"endColumn":49},{"ruleId":"453","severity":1,"message":"454","line":110,"column":38,"nodeType":"455","messageId":"456","endLine":110,"endColumn":40},{"ruleId":"400","severity":1,"message":"508","line":5,"column":7,"nodeType":"402","messageId":"403","endLine":5,"endColumn":15},{"ruleId":"462","severity":1,"message":"463","line":12,"column":11,"nodeType":"415","endLine":15,"endColumn":13},{"ruleId":"400","severity":1,"message":"508","line":5,"column":7,"nodeType":"402","messageId":"403","endLine":5,"endColumn":15},{"ruleId":"462","severity":1,"message":"463","line":12,"column":11,"nodeType":"415","endLine":15,"endColumn":13},{"ruleId":"425","severity":1,"message":"514","line":5,"column":1,"nodeType":"427","endLine":15,"endColumn":3},{"ruleId":"400","severity":1,"message":"481","line":7,"column":3,"nodeType":"402","messageId":"403","endLine":7,"endColumn":8},{"ruleId":"400","severity":1,"message":"482","line":8,"column":3,"nodeType":"402","messageId":"403","endLine":8,"endColumn":17},{"ruleId":"400","severity":1,"message":"483","line":9,"column":3,"nodeType":"402","messageId":"403","endLine":9,"endColumn":8},{"ruleId":"400","severity":1,"message":"459","line":10,"column":3,"nodeType":"402","messageId":"403","endLine":10,"endColumn":12},{"ruleId":"400","severity":1,"message":"484","line":11,"column":3,"nodeType":"402","messageId":"403","endLine":11,"endColumn":11},{"ruleId":"400","severity":1,"message":"485","line":12,"column":3,"nodeType":"402","messageId":"403","endLine":12,"endColumn":12},{"ruleId":"400","severity":1,"message":"486","line":13,"column":3,"nodeType":"402","messageId":"403","endLine":13,"endColumn":12},{"ruleId":"400","severity":1,"message":"487","line":15,"column":3,"nodeType":"402","messageId":"403","endLine":15,"endColumn":14},{"ruleId":"400","severity":1,"message":"429","line":16,"column":3,"nodeType":"402","messageId":"403","endLine":16,"endColumn":9},{"ruleId":"400","severity":1,"message":"488","line":18,"column":10,"nodeType":"402","messageId":"403","endLine":18,"endColumn":20},{"ruleId":"400","severity":1,"message":"489","line":25,"column":8,"nodeType":"402","messageId":"403","endLine":25,"endColumn":16},{"ruleId":"400","severity":1,"message":"490","line":26,"column":8,"nodeType":"402","messageId":"403","endLine":26,"endColumn":18},{"ruleId":"400","severity":1,"message":"411","line":28,"column":8,"nodeType":"402","messageId":"403","endLine":28,"endColumn":20},{"ruleId":"400","severity":1,"message":"491","line":57,"column":10,"nodeType":"402","messageId":"403","endLine":57,"endColumn":19},{"ruleId":"400","severity":1,"message":"492","line":57,"column":21,"nodeType":"402","messageId":"403","endLine":57,"endColumn":33},{"ruleId":"434","severity":1,"message":"468","line":61,"column":6,"nodeType":"436","endLine":61,"endColumn":8,"suggestions":"515"},{"ruleId":"400","severity":1,"message":"494","line":63,"column":9,"nodeType":"402","messageId":"403","endLine":63,"endColumn":17},{"ruleId":"400","severity":1,"message":"516","line":1,"column":7,"nodeType":"402","messageId":"403","endLine":1,"endColumn":11},"no-unused-vars","'Chat' is defined but never used.","Identifier","unusedVar","no-native-reassign",["517"],"no-negated-in-lhs",["518"],"'LandingNav' is defined but never used.","'SellerPage' is defined but never used.","'RegisterPage' is defined but never used.","'EmployeeList' is defined but never used.","'Buyer' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement",["517"],["518"],"'Fragment' is defined but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","'connect' is defined but never used.","'PropTypes' is defined but never used.","'mapStateToProps' is assigned a value but never used.","'React' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Dashboard' is defined but never used.","'Button' is defined but never used.","'AddCircle' is defined but never used.","'spacing' is defined but never used.","'OrderDetailService' is defined but never used.","'theme' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshOrderTable'. Either include it or remove the dependency array.","ArrayExpression",["519"],"'setSelectedValue' is assigned a value but never used.","'Container' is defined but never used.","'Autocomplete' is defined but never used.","'fieldValue' is assigned a value but never used.","'setFieldValue' is assigned a value but never used.","'inputValue' is assigned a value but never used.","'setInputValue' is assigned a value but never used.","'setNewOrder' is assigned a value but never used.","'orderdetailID' is assigned a value but never used.","'file' is assigned a value but never used.","'field' is assigned a value but never used.","'fileName' is assigned a value but never used.","'handleListItemClick' is assigned a value but never used.","'handleFile' is assigned a value but never used.","'changeField' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect contains a call to 'setRows'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.tableData] as a second argument to the useEffect Hook.",["520"],"'TableHead' is defined but never used.","React Hook useEffect has a missing dependency: 'refreshEmployeeList'. Either include it or remove the dependency array.",["521"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["522"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["523"],["524"],["517"],["518"],["525"],["526"],["527"],"'Paper' is defined but never used.","'TableContainer' is defined but never used.","'Table' is defined but never used.","'TableRow' is defined but never used.","'TableCell' is defined but never used.","'TableBody' is defined but never used.","'ButtonGroup' is defined but never used.","'makeStyles' is defined but never used.","'EditIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'currentId' is assigned a value but never used.","'setCurrentId' is assigned a value but never used.",["528"],"'onDelete' is assigned a value but never used.","'useState' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'FormHelperText' is defined but never used.","'addToast' is assigned a value but never used.","'setRole' is assigned a value but never used.","'resetForm' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.sellerList', 'setErrors', and 'setValues'. Either include them or remove the dependency array.",["529"],["530"],"'useEffect' is defined but never used.","'islogged' is assigned a value but never used.",["531"],"'Grid' is defined but never used.","'withStyles' is defined but never used.","'openPopup' is assigned a value but never used.","'setOpenPopup' is assigned a value but never used.","Assign object to a variable before exporting as module default",["532"],"'User' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"539","fix":"541"},{"desc":"539","fix":"542"},{"desc":"539","fix":"543"},{"desc":"539","fix":"544"},{"desc":"539","fix":"545"},{"desc":"539","fix":"546"},{"desc":"547","fix":"548"},{"desc":"547","fix":"549"},{"desc":"547","fix":"550"},{"desc":"539","fix":"551"},"Update the dependencies array to be: [refreshOrderTable]",{"range":"552","text":"553"},"Add dependencies array: [props.tableData]",{"range":"554","text":"555"},"Update the dependencies array to be: [refreshEmployeeList]",{"range":"556","text":"557"},"Update the dependencies array to be: [props]",{"range":"558","text":"559"},{"range":"560","text":"559"},{"range":"561","text":"559"},{"range":"562","text":"559"},{"range":"563","text":"559"},{"range":"564","text":"559"},{"range":"565","text":"559"},"Update the dependencies array to be: [props.currentId, props.sellerList, setErrors, setValues]",{"range":"566","text":"567"},{"range":"568","text":"567"},{"range":"569","text":"567"},{"range":"570","text":"559"},[925,927],"[refreshOrderTable]",[1280,1280],", [props.tableData]",[1158,1160],"[refreshEmployeeList]",[1229,1231],"[props]",[1098,1100],[1098,1100],[1231,1233],[1144,1146],[1233,1235],[1659,1661],[4521,4538],"[props.currentId, props.sellerList, setErrors, setValues]",[3256,3273],[2883,2900],[1657,1659]]